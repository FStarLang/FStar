open Prims
let (imp_qn : Prims.string Prims.list) = ["Prims"; "l_imp"]
let (and_qn : Prims.string Prims.list) = ["Prims"; "l_and"]
let (or_qn : Prims.string Prims.list) = ["Prims"; "l_or"]
let (not_qn : Prims.string Prims.list) = ["Prims"; "l_not"]
let (iff_qn : Prims.string Prims.list) = ["Prims"; "l_iff"]
let (eq2_qn : Prims.string Prims.list) = ["Prims"; "eq2"]
let (eq1_qn : Prims.string Prims.list) = ["Prims"; "eq"]
let (true_qn : Prims.string Prims.list) = ["Prims"; "l_True"]
let (false_qn : Prims.string Prims.list) = ["Prims"; "l_False"]
let (b2t_qn : Prims.string Prims.list) = ["Prims"; "b2t"]
let (forall_qn : Prims.string Prims.list) = ["Prims"; "l_Forall"]
let (exists_qn : Prims.string Prims.list) = ["Prims"; "l_Exists"]
let (squash_qn : Prims.string Prims.list) = ["Prims"; "squash"]
let (bool_true_qn : Prims.string Prims.list) = ["Prims"; "true"]
let (bool_false_qn : Prims.string Prims.list) = ["Prims"; "false"]
let (int_lid : Prims.string Prims.list) = ["Prims"; "int"]
let (bool_lid : Prims.string Prims.list) = ["Prims"; "bool"]
let (unit_lid : Prims.string Prims.list) = ["Prims"; "unit"]
let (string_lid : Prims.string Prims.list) = ["Prims"; "string"]
let (add_qn : Prims.string Prims.list) = ["Prims"; "op_Addition"]
let (neg_qn : Prims.string Prims.list) = ["Prims"; "op_Minus"]
let (minus_qn : Prims.string Prims.list) = ["Prims"; "op_Subtraction"]
let (mult_qn : Prims.string Prims.list) = ["Prims"; "op_Multiply"]
let (mult'_qn : Prims.string Prims.list) = ["FStar"; "Mul"; "op_Star"]
let (div_qn : Prims.string Prims.list) = ["Prims"; "op_Division"]
let (lt_qn : Prims.string Prims.list) = ["Prims"; "op_LessThan"]
let (lte_qn : Prims.string Prims.list) = ["Prims"; "op_LessThanOrEqual"]
let (gt_qn : Prims.string Prims.list) = ["Prims"; "op_GreaterThan"]
let (gte_qn : Prims.string Prims.list) = ["Prims"; "op_GreaterThanOrEqual"]
let (mod_qn : Prims.string Prims.list) = ["Prims"; "op_Modulus"]
let (nil_qn : Prims.string Prims.list) = ["Prims"; "Nil"]
let (cons_qn : Prims.string Prims.list) = ["Prims"; "Cons"]
let (mktuple2_qn : Prims.string Prims.list) =
  ["FStar"; "Pervasives"; "Native"; "Mktuple2"]
let (mktuple3_qn : Prims.string Prims.list) =
  ["FStar"; "Pervasives"; "Native"; "Mktuple3"]
let (mktuple4_qn : Prims.string Prims.list) =
  ["FStar"; "Pervasives"; "Native"; "Mktuple4"]
let (mktuple5_qn : Prims.string Prims.list) =
  ["FStar"; "Pervasives"; "Native"; "Mktuple5"]
let (mktuple6_qn : Prims.string Prims.list) =
  ["FStar"; "Pervasives"; "Native"; "Mktuple6"]
let (mktuple7_qn : Prims.string Prims.list) =
  ["FStar"; "Pervasives"; "Native"; "Mktuple7"]
let (mktuple8_qn : Prims.string Prims.list) =
  ["FStar"; "Pervasives"; "Native"; "Mktuple8"]
let (land_qn : Prims.string Prims.list) = ["FStar"; "UInt"; "logand"]
let (lxor_qn : Prims.string Prims.list) = ["FStar"; "UInt"; "logxor"]
let (lor_qn : Prims.string Prims.list) = ["FStar"; "UInt"; "logor"]
let (ladd_qn : Prims.string Prims.list) = ["FStar"; "UInt"; "add_mod"]
let (lsub_qn : Prims.string Prims.list) = ["FStar"; "UInt"; "sub_mod"]
let (shiftl_qn : Prims.string Prims.list) = ["FStar"; "UInt"; "shift_left"]
let (shiftr_qn : Prims.string Prims.list) = ["FStar"; "UInt"; "shift_right"]
let (udiv_qn : Prims.string Prims.list) = ["FStar"; "UInt"; "udiv"]
let (umod_qn : Prims.string Prims.list) = ["FStar"; "UInt"; "mod"]
let (mul_mod_qn : Prims.string Prims.list) = ["FStar"; "UInt"; "mul_mod"]
let (nat_bv_qn : Prims.string Prims.list) = ["FStar"; "BV"; "int2bv"]