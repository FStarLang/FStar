open Prims
type ('a, 'a1) capture = ('a1 * 'a)
let struct1 : Prims.int= Prims.int_one
let struct11 : Prims.int= (Prims.of_int (2))
let test : (Prims.int * Prims.int)=
  let x = Prims.int_zero in let x1 = (Prims.of_int (2)) in (x, x1)
let r (uu___ : unit) (uu___1 : unit) (uu___2 : Obj.t -> Obj.t) : Prims.int=
  Prims.int_zero
let g (uu___ : Prims.int) (uu___1 : Prims.int) : Prims.int= Prims.int_zero
let ko (a : Prims.int) : Prims.int=
  let a1 = a in r () () (fun uu___ -> (Obj.magic (g a1)) uu___)
type record_t = {
  struct1: Prims.int ;
  constraint1: Prims.bool }
let __proj__Mkrecord_t__item__struct (projectee : record_t) : Prims.int=
  match projectee with | { struct1 = struct2; constraint1;_} -> struct2
let __proj__Mkrecord_t__item__constraint (projectee : record_t) : Prims.bool=
  match projectee with | { struct1 = struct2; constraint1;_} -> constraint1
