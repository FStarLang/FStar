Module after desugaring:
module Bug1997
Declarations: [
let op_Equals_Hat a b = a + b
let test1 a b c = a =^ b =^ c
let test2 a b c = a =^ b =^ c
let test3 a b c = a =^ (b =^ c)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.test1 == Bug1997.test2)

let imp_assoc_0 p q r = p ==> q ==> r
let imp_assoc_1 p q r = p ==> q ==> r
let imp_assoc_2 p q r = (p ==> q) ==> r
private
let _ = FStar.Pervasives.assert_norm (Bug1997.imp_assoc_0 == Bug1997.imp_assoc_1)

let imp_iff_0 p q r = p ==> q <==> r
let imp_iff_1 p q r = p ==> q <==> r
let imp_iff_2 p q r = p ==> (q <==> r)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.imp_iff_0 == Bug1997.imp_iff_1)

let imp_conj_1 p q r s = p ==> q /\ r ==> s
let imp_conj_2 p q r s = (p ==> q) /\ (r ==> s)
let imp_conj_3 p q r s = p ==> q /\ (r ==> s)
let imp_conj_4 p q r s = p ==> q /\ r ==> s
private
let _ = FStar.Pervasives.assert_norm (Bug1997.imp_conj_1 == Bug1997.imp_conj_4)





let impneg1 p q r = p ==> q /\ ~p ==> r
let impneg2 p q r = (p ==> q) /\ (~p ==> r)
let impneg3 p q r = p ==> q /\ (~p ==> r)
let impneg4 p q r = p ==> q /\ ~p ==> r
private
let _ = FStar.Pervasives.assert_norm (Bug1997.impneg1 == Bug1997.impneg4)





let cd1 p q r = p /\ q \/ r
let cd2 p q r = p /\ q \/ r
let cd3 p q r = p /\ (q \/ r)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.cd1 == Bug1997.cd2)


let m0 p q r s = p /\ (q \/ r) /\ s
let m1 p q r s = p /\ q \/ r /\ s
let m2 p q r s = p /\ q \/ r /\ s
let m3 p q r s = p /\ q \/ r /\ s
let m4 p q r s = p /\ q \/ r /\ s
private
let _ = FStar.Pervasives.assert_norm (Bug1997.m1 == Bug1997.m2)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.m1 == Bug1997.m3)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.m1 == Bug1997.m4)




let n0 p q r s = p \/ q /\ r \/ s
let n1 p q r s = p \/ q /\ r \/ s
let n2 p q r s = (p \/ q) /\ r \/ s
let n3 p q r s = (p \/ q) /\ (r \/ s)
let n4 p q r s = p \/ q /\ (r \/ s)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.n0 == Bug1997.n1)






]
Exports: [
let op_Equals_Hat a b = a + b
let test1 a b c = a =^ b =^ c
let test2 a b c = a =^ b =^ c
let test3 a b c = a =^ (b =^ c)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.test1 == Bug1997.test2)

let imp_assoc_0 p q r = p ==> q ==> r
let imp_assoc_1 p q r = p ==> q ==> r
let imp_assoc_2 p q r = (p ==> q) ==> r
private
let _ = FStar.Pervasives.assert_norm (Bug1997.imp_assoc_0 == Bug1997.imp_assoc_1)

let imp_iff_0 p q r = p ==> q <==> r
let imp_iff_1 p q r = p ==> q <==> r
let imp_iff_2 p q r = p ==> (q <==> r)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.imp_iff_0 == Bug1997.imp_iff_1)

let imp_conj_1 p q r s = p ==> q /\ r ==> s
let imp_conj_2 p q r s = (p ==> q) /\ (r ==> s)
let imp_conj_3 p q r s = p ==> q /\ (r ==> s)
let imp_conj_4 p q r s = p ==> q /\ r ==> s
private
let _ = FStar.Pervasives.assert_norm (Bug1997.imp_conj_1 == Bug1997.imp_conj_4)





let impneg1 p q r = p ==> q /\ ~p ==> r
let impneg2 p q r = (p ==> q) /\ (~p ==> r)
let impneg3 p q r = p ==> q /\ (~p ==> r)
let impneg4 p q r = p ==> q /\ ~p ==> r
private
let _ = FStar.Pervasives.assert_norm (Bug1997.impneg1 == Bug1997.impneg4)





let cd1 p q r = p /\ q \/ r
let cd2 p q r = p /\ q \/ r
let cd3 p q r = p /\ (q \/ r)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.cd1 == Bug1997.cd2)


let m0 p q r s = p /\ (q \/ r) /\ s
let m1 p q r s = p /\ q \/ r /\ s
let m2 p q r s = p /\ q \/ r /\ s
let m3 p q r s = p /\ q \/ r /\ s
let m4 p q r s = p /\ q \/ r /\ s
private
let _ = FStar.Pervasives.assert_norm (Bug1997.m1 == Bug1997.m2)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.m1 == Bug1997.m3)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.m1 == Bug1997.m4)




let n0 p q r s = p \/ q /\ r \/ s
let n1 p q r s = p \/ q /\ r \/ s
let n2 p q r s = (p \/ q) /\ r \/ s
let n3 p q r s = (p \/ q) /\ (r \/ s)
let n4 p q r s = p \/ q /\ (r \/ s)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.n0 == Bug1997.n1)






]

Module before type checking:
module Bug1997
Declarations: [
let op_Equals_Hat a b = a + b
let test1 a b c = a =^ b =^ c
let test2 a b c = a =^ b =^ c
let test3 a b c = a =^ (b =^ c)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.test1 == Bug1997.test2)

let imp_assoc_0 p q r = p ==> q ==> r
let imp_assoc_1 p q r = p ==> q ==> r
let imp_assoc_2 p q r = (p ==> q) ==> r
private
let _ = FStar.Pervasives.assert_norm (Bug1997.imp_assoc_0 == Bug1997.imp_assoc_1)

let imp_iff_0 p q r = p ==> q <==> r
let imp_iff_1 p q r = p ==> q <==> r
let imp_iff_2 p q r = p ==> (q <==> r)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.imp_iff_0 == Bug1997.imp_iff_1)

let imp_conj_1 p q r s = p ==> q /\ r ==> s
let imp_conj_2 p q r s = (p ==> q) /\ (r ==> s)
let imp_conj_3 p q r s = p ==> q /\ (r ==> s)
let imp_conj_4 p q r s = p ==> q /\ r ==> s
private
let _ = FStar.Pervasives.assert_norm (Bug1997.imp_conj_1 == Bug1997.imp_conj_4)





let impneg1 p q r = p ==> q /\ ~p ==> r
let impneg2 p q r = (p ==> q) /\ (~p ==> r)
let impneg3 p q r = p ==> q /\ (~p ==> r)
let impneg4 p q r = p ==> q /\ ~p ==> r
private
let _ = FStar.Pervasives.assert_norm (Bug1997.impneg1 == Bug1997.impneg4)





let cd1 p q r = p /\ q \/ r
let cd2 p q r = p /\ q \/ r
let cd3 p q r = p /\ (q \/ r)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.cd1 == Bug1997.cd2)


let m0 p q r s = p /\ (q \/ r) /\ s
let m1 p q r s = p /\ q \/ r /\ s
let m2 p q r s = p /\ q \/ r /\ s
let m3 p q r s = p /\ q \/ r /\ s
let m4 p q r s = p /\ q \/ r /\ s
private
let _ = FStar.Pervasives.assert_norm (Bug1997.m1 == Bug1997.m2)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.m1 == Bug1997.m3)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.m1 == Bug1997.m4)




let n0 p q r s = p \/ q /\ r \/ s
let n1 p q r s = p \/ q /\ r \/ s
let n2 p q r s = (p \/ q) /\ r \/ s
let n3 p q r s = (p \/ q) /\ (r \/ s)
let n4 p q r s = p \/ q /\ (r \/ s)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.n0 == Bug1997.n1)






]
Exports: [
let op_Equals_Hat a b = a + b
let test1 a b c = a =^ b =^ c
let test2 a b c = a =^ b =^ c
let test3 a b c = a =^ (b =^ c)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.test1 == Bug1997.test2)

let imp_assoc_0 p q r = p ==> q ==> r
let imp_assoc_1 p q r = p ==> q ==> r
let imp_assoc_2 p q r = (p ==> q) ==> r
private
let _ = FStar.Pervasives.assert_norm (Bug1997.imp_assoc_0 == Bug1997.imp_assoc_1)

let imp_iff_0 p q r = p ==> q <==> r
let imp_iff_1 p q r = p ==> q <==> r
let imp_iff_2 p q r = p ==> (q <==> r)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.imp_iff_0 == Bug1997.imp_iff_1)

let imp_conj_1 p q r s = p ==> q /\ r ==> s
let imp_conj_2 p q r s = (p ==> q) /\ (r ==> s)
let imp_conj_3 p q r s = p ==> q /\ (r ==> s)
let imp_conj_4 p q r s = p ==> q /\ r ==> s
private
let _ = FStar.Pervasives.assert_norm (Bug1997.imp_conj_1 == Bug1997.imp_conj_4)





let impneg1 p q r = p ==> q /\ ~p ==> r
let impneg2 p q r = (p ==> q) /\ (~p ==> r)
let impneg3 p q r = p ==> q /\ (~p ==> r)
let impneg4 p q r = p ==> q /\ ~p ==> r
private
let _ = FStar.Pervasives.assert_norm (Bug1997.impneg1 == Bug1997.impneg4)





let cd1 p q r = p /\ q \/ r
let cd2 p q r = p /\ q \/ r
let cd3 p q r = p /\ (q \/ r)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.cd1 == Bug1997.cd2)


let m0 p q r s = p /\ (q \/ r) /\ s
let m1 p q r s = p /\ q \/ r /\ s
let m2 p q r s = p /\ q \/ r /\ s
let m3 p q r s = p /\ q \/ r /\ s
let m4 p q r s = p /\ q \/ r /\ s
private
let _ = FStar.Pervasives.assert_norm (Bug1997.m1 == Bug1997.m2)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.m1 == Bug1997.m3)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.m1 == Bug1997.m4)




let n0 p q r s = p \/ q /\ r \/ s
let n1 p q r s = p \/ q /\ r \/ s
let n2 p q r s = (p \/ q) /\ r \/ s
let n3 p q r s = (p \/ q) /\ (r \/ s)
let n4 p q r s = p \/ q /\ (r \/ s)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.n0 == Bug1997.n1)






]

>> Got issues: [
Bug1997.fst(13,19-13,55): (Error 19) assertion failed (Also see: prims.fst(96,32-96,42)); The SMT solver could not prove the query. Use --query_stats for more details.
>>]
>> Got issues: [
Bug1997.fst(21,19-21,67): (Error 19) assertion failed (Also see: prims.fst(96,32-96,42)); The SMT solver could not prove the query. Use --query_stats for more details.
>>]
>> Got issues: [
Bug1997.fst(29,19-29,63): (Error 19) assertion failed (Also see: prims.fst(96,32-96,42)); The SMT solver could not prove the query. Use --query_stats for more details.
>>]
>> Got issues: [
Bug1997.fst(38,19-38,65): (Error 19) assertion failed (Also see: prims.fst(96,32-96,42)); The SMT solver could not prove the query. Use --query_stats for more details.
>>]
>> Got issues: [
Bug1997.fst(39,19-39,65): (Error 19) assertion failed (Also see: prims.fst(96,32-96,42)); The SMT solver could not prove the query. Use --query_stats for more details.
>>]
>> Got issues: [
Bug1997.fst(40,19-40,65): (Error 19) assertion failed (Also see: prims.fst(96,32-96,42)); The SMT solver could not prove the query. Use --query_stats for more details.
>>]
>> Got issues: [
Bug1997.fst(41,19-41,65): (Error 19) assertion failed (Also see: prims.fst(96,32-96,42)); The SMT solver could not prove the query. Use --query_stats for more details.
>>]
>> Got issues: [
Bug1997.fst(42,19-42,65): (Error 19) assertion failed (Also see: prims.fst(96,32-96,42)); The SMT solver could not prove the query. Use --query_stats for more details.
>>]
>> Got issues: [
Bug1997.fst(51,19-51,59): (Error 19) assertion failed (Also see: prims.fst(96,32-96,42)); The SMT solver could not prove the query. Use --query_stats for more details.
>>]
>> Got issues: [
Bug1997.fst(52,19-52,59): (Error 19) assertion failed (Also see: prims.fst(96,32-96,42)); The SMT solver could not prove the query. Use --query_stats for more details.
>>]
>> Got issues: [
Bug1997.fst(53,19-53,59): (Error 19) assertion failed (Also see: prims.fst(96,32-96,42)); The SMT solver could not prove the query. Use --query_stats for more details.
>>]
>> Got issues: [
Bug1997.fst(54,19-54,59): (Error 19) assertion failed (Also see: prims.fst(96,32-96,42)); The SMT solver could not prove the query. Use --query_stats for more details.
>>]
>> Got issues: [
Bug1997.fst(55,19-55,59): (Error 19) assertion failed (Also see: prims.fst(96,32-96,42)); The SMT solver could not prove the query. Use --query_stats for more details.
>>]
>> Got issues: [
Bug1997.fst(63,19-63,51): (Error 19) assertion failed (Also see: prims.fst(96,32-96,42)); The SMT solver could not prove the query. Use --query_stats for more details.
>>]
>> Got issues: [
Bug1997.fst(64,19-64,51): (Error 19) assertion failed (Also see: prims.fst(96,32-96,42)); The SMT solver could not prove the query. Use --query_stats for more details.
>>]
>> Got issues: [
Bug1997.fst(75,19-75,49): (Error 19) assertion failed (Also see: prims.fst(96,32-96,42)); The SMT solver could not prove the query. Use --query_stats for more details.
>>]
>> Got issues: [
Bug1997.fst(76,19-76,49): (Error 19) assertion failed (Also see: prims.fst(96,32-96,42)); The SMT solver could not prove the query. Use --query_stats for more details.
>>]
>> Got issues: [
Bug1997.fst(77,19-77,49): (Error 19) assertion failed (Also see: prims.fst(96,32-96,42)); The SMT solver could not prove the query. Use --query_stats for more details.
>>]
>> Got issues: [
Bug1997.fst(78,19-78,49): (Error 19) assertion failed (Also see: prims.fst(96,32-96,42)); The SMT solver could not prove the query. Use --query_stats for more details.
>>]
>> Got issues: [
Bug1997.fst(87,19-87,49): (Error 19) assertion failed (Also see: prims.fst(96,32-96,42)); The SMT solver could not prove the query. Use --query_stats for more details.
>>]
>> Got issues: [
Bug1997.fst(88,19-88,49): (Error 19) assertion failed (Also see: prims.fst(96,32-96,42)); The SMT solver could not prove the query. Use --query_stats for more details.
>>]
>> Got issues: [
Bug1997.fst(89,19-89,49): (Error 19) assertion failed (Also see: prims.fst(96,32-96,42)); The SMT solver could not prove the query. Use --query_stats for more details.
>>]
>> Got issues: [
Bug1997.fst(90,19-90,49): (Error 19) assertion failed (Also see: prims.fst(96,32-96,42)); The SMT solver could not prove the query. Use --query_stats for more details.
>>]
>> Got issues: [
Bug1997.fst(91,19-91,49): (Error 19) assertion failed (Also see: prims.fst(96,32-96,42)); The SMT solver could not prove the query. Use --query_stats for more details.
>>]
>> Got issues: [
Bug1997.fst(92,19-92,49): (Error 19) assertion failed (Also see: prims.fst(96,32-96,42)); The SMT solver could not prove the query. Use --query_stats for more details.
>>]
Module after type checking:
module Bug1997
Declarations: [
let op_Equals_Hat a b = a + b
let test1 a b c = a =^ b =^ c
let test2 a b c = a =^ b =^ c
let test3 a b c = a =^ (b =^ c)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.test1 == Bug1997.test2)
let imp_assoc_0 p q r = p ==> q ==> r
let imp_assoc_1 p q r = p ==> q ==> r
let imp_assoc_2 p q r = (p ==> q) ==> r
private
let _ = FStar.Pervasives.assert_norm (Bug1997.imp_assoc_0 == Bug1997.imp_assoc_1)
let imp_iff_0 p q r = p ==> q <==> r
let imp_iff_1 p q r = p ==> q <==> r
let imp_iff_2 p q r = p ==> (q <==> r)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.imp_iff_0 == Bug1997.imp_iff_1)
let imp_conj_1 p q r s = p ==> q /\ r ==> s
let imp_conj_2 p q r s = (p ==> q) /\ (r ==> s)
let imp_conj_3 p q r s = p ==> q /\ (r ==> s)
let imp_conj_4 p q r s = p ==> q /\ r ==> s
private
let _ = FStar.Pervasives.assert_norm (Bug1997.imp_conj_1 == Bug1997.imp_conj_4)
let impneg1 p q r = p ==> q /\ ~p ==> r
let impneg2 p q r = (p ==> q) /\ (~p ==> r)
let impneg3 p q r = p ==> q /\ (~p ==> r)
let impneg4 p q r = p ==> q /\ ~p ==> r
private
let _ = FStar.Pervasives.assert_norm (Bug1997.impneg1 == Bug1997.impneg4)
let cd1 p q r = p /\ q \/ r
let cd2 p q r = p /\ q \/ r
let cd3 p q r = p /\ (q \/ r)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.cd1 == Bug1997.cd2)
let m0 p q r s = p /\ (q \/ r) /\ s
let m1 p q r s = p /\ q \/ r /\ s
let m2 p q r s = p /\ q \/ r /\ s
let m3 p q r s = p /\ q \/ r /\ s
let m4 p q r s = p /\ q \/ r /\ s
private
let _ = FStar.Pervasives.assert_norm (Bug1997.m1 == Bug1997.m2)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.m1 == Bug1997.m3)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.m1 == Bug1997.m4)
let n0 p q r s = p \/ q /\ r \/ s
let n1 p q r s = p \/ q /\ r \/ s
let n2 p q r s = (p \/ q) /\ r \/ s
let n3 p q r s = (p \/ q) /\ (r \/ s)
let n4 p q r s = p \/ q /\ (r \/ s)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.n0 == Bug1997.n1)
]
Exports: [
let op_Equals_Hat a b = a + b
let test1 a b c = a =^ b =^ c
let test2 a b c = a =^ b =^ c
let test3 a b c = a =^ (b =^ c)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.test1 == Bug1997.test2)
let imp_assoc_0 p q r = p ==> q ==> r
let imp_assoc_1 p q r = p ==> q ==> r
let imp_assoc_2 p q r = (p ==> q) ==> r
private
let _ = FStar.Pervasives.assert_norm (Bug1997.imp_assoc_0 == Bug1997.imp_assoc_1)
let imp_iff_0 p q r = p ==> q <==> r
let imp_iff_1 p q r = p ==> q <==> r
let imp_iff_2 p q r = p ==> (q <==> r)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.imp_iff_0 == Bug1997.imp_iff_1)
let imp_conj_1 p q r s = p ==> q /\ r ==> s
let imp_conj_2 p q r s = (p ==> q) /\ (r ==> s)
let imp_conj_3 p q r s = p ==> q /\ (r ==> s)
let imp_conj_4 p q r s = p ==> q /\ r ==> s
private
let _ = FStar.Pervasives.assert_norm (Bug1997.imp_conj_1 == Bug1997.imp_conj_4)
let impneg1 p q r = p ==> q /\ ~p ==> r
let impneg2 p q r = (p ==> q) /\ (~p ==> r)
let impneg3 p q r = p ==> q /\ (~p ==> r)
let impneg4 p q r = p ==> q /\ ~p ==> r
private
let _ = FStar.Pervasives.assert_norm (Bug1997.impneg1 == Bug1997.impneg4)
let cd1 p q r = p /\ q \/ r
let cd2 p q r = p /\ q \/ r
let cd3 p q r = p /\ (q \/ r)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.cd1 == Bug1997.cd2)
let m0 p q r s = p /\ (q \/ r) /\ s
let m1 p q r s = p /\ q \/ r /\ s
let m2 p q r s = p /\ q \/ r /\ s
let m3 p q r s = p /\ q \/ r /\ s
let m4 p q r s = p /\ q \/ r /\ s
private
let _ = FStar.Pervasives.assert_norm (Bug1997.m1 == Bug1997.m2)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.m1 == Bug1997.m3)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.m1 == Bug1997.m4)
let n0 p q r s = p \/ q /\ r \/ s
let n1 p q r s = p \/ q /\ r \/ s
let n2 p q r s = (p \/ q) /\ r \/ s
let n3 p q r s = (p \/ q) /\ (r \/ s)
let n4 p q r s = p \/ q /\ (r \/ s)
private
let _ = FStar.Pervasives.assert_norm (Bug1997.n0 == Bug1997.n1)
]

Verified module: Bug1997
All verification conditions discharged successfully
