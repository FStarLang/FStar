Module after desugaring:
module Bug3227
Declarations: [
type box (a: Type) = { x:a }

let proj b = x (x (x b)) <: Prims.int
type box2 (a: Type) = | Box2 : x: a -> Bug3227.box2 a



let test b = Box2? b && Box2? b.x
noeq
type boxf (a: Type) = { ff:_: a -> a }

let test2 r = ff r 5
noeq
type boxfi (a: Type) = { ff:a }

let test3 r = ff r
let test4 r x = ff r x <: a
]

Module before type checking:
module Bug3227
Declarations: [
type box (a: Type) = { x:a }

let proj b = x (x (x b)) <: Prims.int
type box2 (a: Type) = | Box2 : x: a -> Bug3227.box2 a



let test b = Box2? b && Box2? b.x
noeq
type boxf (a: Type) = { ff:_: a -> a }

let test2 r = ff r 5
noeq
type boxfi (a: Type) = { ff:a }

let test3 r = ff r
let test4 r x = ff r x <: a
]

Module after type checking:
module Bug3227
Declarations: [
type box (a: Type) = { x:a }
val box__uu___haseq: forall (a: Type). {:pattern Prims.hasEq (Bug3227.box a)}
  Prims.l_True /\ Prims.hasEq a ==> Prims.hasEq (Bug3227.box a)


let proj b = b.x.x.x <: Prims.int
type box2 (a: Type) = | Box2 : x: a -> Bug3227.box2 a
val box2__uu___haseq: forall (a: Type). {:pattern Prims.hasEq (Bug3227.box2 a)}
  Prims.l_True /\ Prims.hasEq a ==> Prims.hasEq (Bug3227.box2 a)




let test b = Box2? b && Box2? b.x
noeq
type boxf (a: Type) = { ff:_: a -> a }


let test2 r = r.ff 5
noeq
type boxfi (a: Type) = { ff:a }


let test3 r = r.ff
let test4 r x = r.ff x <: a
]

Verified module: Bug3227
All verification conditions discharged successfully
