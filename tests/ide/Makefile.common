.PHONY: .FORCE rebuild-all check-all accept-all
.SUFFIXES:

ALL := $(wildcard *.in)

DISABLED=FailRange.in

IN=$(filter-out $(DISABLED), $(ALL))

all: check

# Rebuild all .out files
BUILD_TARGETS := $(IN:.in=.out)
build: ${BUILD_TARGETS}

# Check that .out files conform to .out.expect references
CHECK_TARGETS := $(BUILD_TARGETS:=.check)
check: ${CHECK_TARGETS}

# Show diffs of non-matching files
DIFF_TARGETS := $(BUILD_TARGETS:=.diff)
diff: ${DIFF_TARGETS}

# Update .expect.out files from .out files
ACCEPT_TARGETS := $(BUILD_TARGETS:=.accept)
accept: ${ACCEPT_TARGETS}

# Remove all .out files
clean:
	rm -f *.out
	rm -f *.out.check

touch:
	touch ${IN}

.FORCE:

%.in: .FORCE

FSTAR_HOME = ../../..
include $(FSTAR_HOME)/ulib/gmake/z3.mk
include $(FSTAR_HOME)/.common.mk

ifdef Z3
SMT=--smt $(Z3)
endif

JSON_CLEANUP:=python ../cleanup.py

# Clean up and accept an existing ‘.out’ file (possibly generated by
# ‘fstar-write-transcript’, or possibly by ‘make build’) and save it as
# ‘.out.expected’.
%.out.accept: %.out
	$(call msg, "ACCEPT", $<)
	$(Q)$(JSON_CLEANUP) "$<.expected" < "$<"

# Verify that a given output matches the corresponding input
%.out.check: %.out %.out.expected
	$(call msg, "DIFF", $<)
	$(Q)diff -u --strip-trailing-cr "$<.expected" "$<"
	$(Q)touch $@
