{
// Adapted from sources of F#
//----------------------------------------------------------------------------
//
// Copyright (c) 2002-2012 Microsoft Corporation.
//
// This source code is subject to terms and conditions of the Apache License, Version 2.0. A
// copy of the license can be found in the License.html file at the root of this distribution.
// By using this source code in any fashion, you are agreeing to be bound
// by the terms of the Apache License, Version 2.0.
//
// You must not remove this notice, or any other, from this software.
//----------------------------------------------------------------------------
// See LICENSE-fsharp.txt at the root of this distribution for terms and conditions
#light "off"
module FStar.LexFStar
(*------------------------------------------------------------------------
 * The Lexer.  Some of the complication arises from the fact it is
 * reused by the Visual Studio mode to do partial lexing reporting
 * whitespace etc.
 * (c) Microsoft Corporation. All rights reserved
 *-----------------------------------------------------------------------*)
open FSharp.Compatibility.OCaml
open FStar.Range
open FStar.Parser
open FStar.Parser.Parse
open FStar.Parser.AST
open FStar.Parser.Util
open FStar.Errors

let string_trim_both s n m = Util.substring s n (Prims.of_int(String.length s) - (n+m))
let trim_both   lexbuf n m = string_trim_both (ulexeme lexbuf) n m
let trim_right  lexbuf n = trim_both lexbuf (Prims.parse_int "0") n
let trim_left   lexbuf n = trim_both lexbuf n (Prims.parse_int "0")

let fail lexbuf msg dflt =
     let m = getLexerRange lexbuf in
     errorR(Error(msg,m));
     dflt

let trim_right_char s c =
  if String.length s > 1 && s.[String.length s - 1] = c
  then string_trim_both s (Prims.parse_int "0") (Prims.parse_int "1")
  else s

let stripped_integer lexbuf =
  let s = ulexeme lexbuf in
  List.fold_left trim_right_char s ['l'; 'L'; 'z'; 'y'; 's'; 'u'; 'U']

let inline trim_and_check_range lexbuf (check: string -> 'a) (max: int64) (descr: string): string * bool =
  let s = stripped_integer lexbuf in
  // FIXME detect Int64.max_int in hex and octal notations too.
  if s = "9223372036854775807"
  then s, true
  else
    let n =
      try int64 s
      with _ -> fail lexbuf "This number is outside the allowable range" 0L in
    // we allow MAX_INT+1 to be represented as a valid token even though it's
    // outside of the admissible range, because it might be preceded by -, in
    // which case it becomes MIN_INT, which is admissible
    if n = max
    then s, true
    else try ignore (check s); s, false
    with _ -> fail lexbuf ("This number is outside the allowable range for " ^ descr ^ " integers") ("0", false)

let inline trim_and_check_range_u lexbuf narrow descr =
  let s = stripped_integer lexbuf in
  try ignore (narrow s); s
  with _ -> fail lexbuf ("This number is outside the allowable range for " ^ descr ^ " integers") "0"

let checkExprOp lexbuf =
  if String.contains (ulexeme lexbuf)  ':'
  then errorR(Error("':' is no longer permitted as a character in operator names" , getLexerRange lexbuf))

let unexpected_char lexbuf =
    failwith ("Unexpected character '"^(lexeme lexbuf)^"'")

let start_string (lexbuf: Microsoft.FSharp.Text.Lexing.LexBuffer<char> (*UnicodeLexing.Lexbuf*)) =
    let buf = Bytes.create 100 in
    let m = getLexerRange  lexbuf in
    let startp = lexbuf.StartPos in
    let fin = (fun m2 b s ->
                     let endp = lexbuf.EndPos in
                     (* Adjust the start-of-token mark back to the true start of the token *)
                     adjust_lexbuf_start_pos lexbuf startp;
                     if b then
                        if Lexhelp.stringbuf_is_bytes buf then
                            BYTEARRAY (Lexhelp.stringbuf_as_bytes buf)
                        else (
                            fail lexbuf "This byte array literal contains characters that do not encode as a single byte" ();
                            BYTEARRAY (Lexhelp.stringbuf_as_bytes buf)
                        )
                     else
                        STRING s)  in
    buf,fin,m

let lc = Util.mk_ref (Prims.parse_int "1")
let rec mknewline n lexbuf =
  if n > (Prims.parse_int "0") then (newline lexbuf; Util.incr lc; mknewline (n-(Prims.parse_int "1")) lexbuf)

type delimiters = {
  angle:ref<int>;
  paren:ref<int>
}

let n_typ_apps = Util.mk_ref (Prims.parse_int "0")
let is_typ_app (args:Lexhelp.lexargs) (lexbuf:Microsoft.FSharp.Text.Lexing.LexBuffer<char> (*UnicodeLexing.Lexbuf*)) =
 if not (Options.fs_typ_app args.filename) then ((* printfn "False 0" ; *) false) else
 try
   let char_ok = new System.Text.RegularExpressions.Regex(@"\w|\s|\(|\)|<|>|\*|-|'|,|\.") in
   let balanced (contents : string) pos =
    if Util.char_at contents pos <> '<' then
      (printfn "Unexpected position"; failwith "die!");
    let d = {angle=ref 1; paren=ref 0} in
    let upd i = match Util.char_at contents (Prims.of_int i) with
      | '(' -> incr d.paren
      | ')' -> decr d.paren
      | '<' -> incr d.angle
      | '>' when Util.char_at contents (Prims.of_int (i-1)) <> '-' -> decr d.angle
      | _ -> () in
    let ok () = !d.angle > 0 && !d.paren >= 0 in
    let rec aux i =
      if !d.angle=0 && !d.paren=0 then true
      else if i >= String.length contents || not (ok ())
      then ((* printfn "False 1: %d, %A" i (!d.angle, !d.paren); *) false)
      else if (not <| char_ok.IsMatch(contents, i)) || (contents.IndexOf("then", i)=i)
      then ((* printfn "False 2: %A\n" (Util.char_at contents i);*)  false)
      else (upd i; aux (i + 1)) in
      aux (Prims.to_int (pos + Prims.parse_int "1")) in
   let res = balanced args.contents (Prims.of_int lexbuf.StartPos.AbsoluteOffset) in
   if res then Util.incr n_typ_apps;
   ((*printfn "Result < : %s" (if res then "true" else "false") ;*) res)
 with e -> printfn "Resolving typ_app<...> syntax failed: %A" e; false

let is_typ_app_gt () =
  let res =
      if !n_typ_apps > (Prims.parse_int "0")
      then (Util.decr n_typ_apps; true)
      else false
   in
   ((* printfn "Result > : %s" (if res then "true" else "false") ; *) res)
}


let letter = '\Lu' | '\Ll' | '\Lt' | '\Lm' | '\Lo' | '\Nl'
let digit = '\Nd'
let hex = ['0'-'9'] | ['A'-'F'] | ['a'-'f']
let truewhite = [' ']
let offwhite = ['\t']
let anywhite = truewhite | offwhite

let xinteger =
  (  '0' ('x'| 'X')  hex +
   | '0' ('o'| 'O')  (['0'-'7']) +
   | '0' ('b'| 'B')  (['0'-'1']) + )
let integer = digit+
let any_integer = xinteger | integer
let unsigned = 'u' | 'U'
let int8 = any_integer 'y'
let uint8 = any_integer unsigned 'y'
let int16 = any_integer 's'
let uint16 = any_integer unsigned 's'
let int32 = any_integer 'l'
let uint32 = any_integer unsigned 'l'
let int64 = any_integer 'L'
let uint64 = any_integer unsigned 'L'
let char8 = any_integer 'z'

let floatp = digit+ '.' digit*
let floate = digit+ ('.' digit* )? ('e'| 'E') ['+' '-']? digit+
let float = floatp | floate
let bigint =  integer 'I'
let bignum =  integer 'N'
let ieee64 = float
(* let ieee64d = (float | integer) ('d' | 'D')  *)
let ieee32 = float ('f' | 'F')
let decimal = (float | integer) ('m' | 'M')
let xieee32 = xinteger 'l' 'f'
let xieee64 = xinteger 'L' 'F'
let escape_char = ('\\' ( '\\' | "\"" | '\'' | 'n' | 't' | 'b' | 'r'))
let char = '\'' ( [^'\\''\n''\r''\t''\b'] | escape_char) '\''
let trigraph = '\\' digit digit digit
let hexgraph_short = '\\' 'x' hex hex
let unicodegraph_short = '\\' 'u' hex hex hex hex
let unicodegraph_long =  '\\' 'U' hex hex hex hex hex hex hex hex
let newline = ('\n' | '\r' '\n')
let connecting_char = '\Pc'
let combining_char = '\Mn' | '\Mc'
let formatting_char = '\Cf'

let op_prefix  = ['!' '~' '?']
let op_infix0a = ['|'] (* left *)
let op_infix0b = ['&'] (* left *)
let op_infix0c = ['=' '<' '>'] (* left *)
let op_infix0c_nogt = ['=' '<'] (* left *)
let op_infix0d = ['$'] (* left *)

let op_infix0  = op_infix0a | op_infix0b | op_infix0c | op_infix0d
let op_infix1  = ['@' '^'] (* right *)
let op_infix2  = ['+' '-'] (* left *)
let op_infix3  = ['*' '/' '%'] (* left *)
let symbolchar = op_prefix | op_infix0 | op_infix1 | op_infix2 | op_infix3 | ['.' ':']

let constructor_start_char = ['A'-'Z']

let ident_start_char =
  '\Ll' | '_'

let ident_char =
    letter
  | connecting_char
  | combining_char
  | formatting_char
  | digit
  | ['\'']

let tvar_char =
    letter
  | connecting_char
  | combining_char
  | formatting_char
  | digit

let constructor = constructor_start_char ident_char*
let ident = ident_start_char ident_char*
let tvar = '\'' (ident_start_char | constructor_start_char) tvar_char*
let tvar_alt = constructor_start_char+

rule token args = parse
 | ident
     { Lexhelp.kwd_or_id args (getLexerRange lexbuf) (ulexeme lexbuf) }
 | '`'
     { BACKTICK }
 | constructor
     { NAME(ulexeme lexbuf) }
 | tvar
     { TVAR (ulexeme lexbuf) }
 | "#light"
     { Options.add_light_off_file args.filename; PRAGMALIGHT }
 | "#set-options"
     { PRAGMA_SET_OPTIONS }
 | "#reset-options"
     { PRAGMA_RESET_OPTIONS }
 | '#' ' ' (digit)*
     { let n = Util.int_of_string (trim_left lexbuf (Prims.parse_int "2")) in
     mknewline (n - !lc) lexbuf;
       cpp_filename args lexbuf }
 | char8
  { CHAR (Util.char_of_int (Util.int_of_string (trim_and_check_range_u lexbuf uint8 "character"))) }
 | int8
  { INT8 (trim_and_check_range lexbuf int8 0x80L "8-bit signed integer") }
 | uint8
  { UINT8 (trim_and_check_range_u lexbuf uint8 "8-bit unsigned integer") }
 | int16
  { INT16 (trim_and_check_range lexbuf int16 0x8000L "16-bit signed integer") }
 | uint16
  { UINT16 (trim_and_check_range_u lexbuf uint16 "16-bit unsigned integer") }
 | int32
  { INT32 (trim_and_check_range lexbuf int32 0x80000000L "32-bit signed integer") }
 | uint32
  { UINT32 (trim_and_check_range_u lexbuf uint32 "32-bit unsigned integer") }
 | int64
  { INT64 (trim_and_check_range lexbuf int64 System.Int64.MaxValue "64-bit signed integer") }
 | uint64
  { UINT64 (trim_and_check_range_u lexbuf uint64 "64-bit unsigned integer") }

 | any_integer
     {
       let s = ulexeme lexbuf in INT(s, false)
     }

 | ieee64
     { IEEE64 (try float(ulexeme lexbuf) with _ -> fail lexbuf "Invalid floating point number" 0.0) }

 | xieee64
     {
       let n64 = int64 (trim_right lexbuf (Prims.parse_int "2")) in
       IEEE64 (System.BitConverter.Int64BitsToDouble(n64)) }

 | (integer | xinteger | float) ident_char+
       { fail lexbuf "This is not a valid numeric literal. Sample formats include 4, 0x4, 0b0100, 4L, 4UL, 4u, 4s, 4us, 4y, 4uy, 4.0, 4.0f, 4N, 4I" (INT32("0",false)) }

 | char
     {
       let s = ulexeme lexbuf in
         CHAR (if s.[1] = '\\' then
                 Lexhelp.escape s.[2]
               else s.[1])
     }

 | char 'B'
     { let s = ulexeme lexbuf in
       UINT8 (Printf.sprintf "%d" (int32 (if s.[1] = '\\' then Lexhelp.escape s.[2] else s.[1])))  }

 | '\'' trigraph '\''
     { let s = ulexeme lexbuf in
       CHAR (Lexhelp.trigraph s.[2] s.[3] s.[4]) }

 | "~"     { TILDE(ulexeme lexbuf) }
 | "-"     { MINUS }
 | "/\\"   { CONJUNCTION }
 | "\\/"   { DISJUNCTION }
 | '\'' hexgraph_short '\'' { CHAR (char (int32 (Lexhelp.hexgraph_short (trim_both lexbuf (Prims.parse_int "3") (Prims.parse_int "1"))))) }
 | '\'' unicodegraph_short '\'' { CHAR (char (int32 (Lexhelp.unicodegraph_short (trim_both lexbuf (Prims.parse_int "3") (Prims.parse_int "1"))))) }
 | '\'' unicodegraph_long '\''  { failwith "This unicode encoding is only valid in string literals" }
 | "<:"             { SUBTYPE }
 | "<@"             { SUBKIND }

 | "(|"             { LENS_PAREN_LEFT }
 | "|)"             { LENS_PAREN_RIGHT }
 
 | "(*" '*'* "*)" // Silly to have, but fsdoc breaks bootstrapping otherwise
    { token args lexbuf }

 | "(*"
     { let m = getLexerRange  lexbuf in
       comment(1,m,args) lexbuf }

 | "(**"
     { fsdoc(1,"",[]) lexbuf}

 | '"'
     { let buf,fin,m = start_string lexbuf in
       string (buf,fin,m,args) lexbuf }

 | '"'
     { let buf,fin,m = start_string lexbuf in
       vstring (buf,fin,m,args) lexbuf }

 | truewhite+
     { token args lexbuf }

 | offwhite+
     {
       token args lexbuf
     }

 | "////"  [^'\n''\r']*
     { (* 4+ slash are 1-line comments, online 3 slash are XMLDoc *)
       token args lexbuf
     }

 | "//"  [^'\n''\r']*
     { token args lexbuf  }

 | newline
     { mknewline (Prims.parse_int "1") lexbuf;
       token args lexbuf }

 | '`' '`' ([^'`' '\n' '\r' '\t'] | '`' [^'`''\n' '\r' '\t']) + '`' '`'
     { IDENT (trim_both lexbuf (Prims.parse_int "2") (Prims.parse_int "2")) }

 | "=" { EQUALS }
 | '#' { HASH }
 | "u#"{ UNIV_HASH }
 | '&' { AMP }
 | "()" { LPAREN_RPAREN }
 | '(' { LPAREN }
 | ')' { RPAREN }
 | ',' { COMMA }
 | "~>" { SQUIGGLY_RARROW }
 | "->" { RARROW }
 | "<--" { LONG_LEFT_ARROW }
 | "<-" { LARROW }
 | "<==>" { IFF }
 | "==>" { IMPLIES }
 | "." { DOT }
 | "?." { QMARK_DOT }
 | "?" { QMARK }
 | ".[" { DOT_LBRACK }
 | ".(" { DOT_LPAREN }
 | "{:pattern" { LBRACE_COLON_PATTERN }
 | ":" { COLON }
 | "::" { COLON_COLON }
 | ":=" { COLON_EQUALS }
 | ";;" { SEMICOLON_SEMICOLON }
 | ";" { SEMICOLON }
 | "%[" { PERCENT_LBRACK }
 | "!{" { BANG_LBRACE }
 | "[@"        { LBRACK_AT }
 | "[" { LBRACK }
 | "[|" { LBRACK_BAR }
 | "<" {  if is_typ_app args lexbuf then TYP_APP_LESS else OPINFIX0c("<")  }
 | ">" {  if is_typ_app_gt () then TYP_APP_GREATER else symbolchar_parser args lexbuf }
 | "|>" { PIPE_RIGHT }
 | "]"  { RBRACK }
 | "|]" { BAR_RBRACK }
 | "{" { LBRACE }
 | "|" { BAR }
 | "}" { RBRACE }
 | "$" { DOLLAR }

 // Operators.
 | op_prefix  symbolchar* { OPPREFIX (ulexeme lexbuf) }
 | op_infix0a symbolchar* { OPINFIX0a (ulexeme lexbuf) }
 | op_infix0b symbolchar* { OPINFIX0b (ulexeme lexbuf) }
 | op_infix0c_nogt symbolchar* { OPINFIX0c (ulexeme lexbuf) }
 | op_infix0d symbolchar* { OPINFIX0d (ulexeme lexbuf) }
 | op_infix1  symbolchar* { OPINFIX1 (ulexeme lexbuf) }
 | op_infix2  symbolchar* { OPINFIX2 (ulexeme lexbuf) }
 | "**"       symbolchar* { OPINFIX4 (ulexeme lexbuf) }
 | op_infix3  symbolchar* { OPINFIX3 (ulexeme lexbuf) }

 | _ { unexpected_char lexbuf }
 | eof { lc := (Prims.parse_int "1"); EOF }

and symbolchar_parser args = parse
 | symbolchar* { OPINFIX0c (">" ^  ulexeme lexbuf) }

and string sargs = parse
 |  '\\' newline anywhite*
    { let (buf,fin,m,args) = sargs in
      mknewline (Prims.parse_int "1") lexbuf;
      string sargs lexbuf }

 |  escape_char
    { let (buf,fin,m,args) = sargs in
      Lexhelp.add_byte_char buf (Lexhelp.escape (lexeme lexbuf).[1]);
      string sargs lexbuf }

 | trigraph
    (* REVIEW: Disallow these in string sargs constants, at least if > 127, since then *)
    (* they have no established meaning *)
    { let (buf,fin,m,args) = sargs in
      let s = ulexeme lexbuf in
      Lexhelp.add_byte_char buf (Lexhelp.trigraph s.[1] s.[2] s.[3]);
      string sargs lexbuf }

 | hexgraph_short
    { let (buf,fin,m,args) = sargs in
      Lexhelp.add_unichar buf (Prims.of_int (int (Lexhelp.hexgraph_short (trim_left lexbuf (Prims.parse_int "2")))));
      string sargs lexbuf  }

 | unicodegraph_short
    (* REVIEW: Disallow these in bytearray constants *)
    { let (buf,fin,m,args) = sargs in
      Lexhelp.add_unichar buf (Prims.of_int (int (Lexhelp.unicodegraph_short (trim_left lexbuf (Prims.parse_int "2")))));
      string sargs lexbuf  }

 | unicodegraph_long
    { let (buf,fin,m,args) = sargs in
      let hi,lo = Lexhelp.unicodegraph_long (trim_left lexbuf (Prims.parse_int "2")) in
      (match hi with | None -> () | Some c -> Lexhelp.add_unichar buf (Prims.of_int (int c)));
      Lexhelp.add_unichar buf (Prims.of_int (int lo));
      string sargs lexbuf  }

 |  '"'
    { let (buf,fin,m,args) = sargs in
      let m2 = getLexerRange lexbuf in
      Lexhelp.call_string_finish fin buf m2 false }

 |  '"''B'
    { let (buf,fin,m,args) = sargs in
      let m2 = getLexerRange lexbuf in
      Lexhelp.call_string_finish fin buf m2 true }

 | newline
    { let (buf,fin,m,args) = sargs in
      mknewline (Prims.parse_int "1") lexbuf;
      Lexhelp.add_string buf (ulexeme lexbuf);
      string sargs lexbuf }

 | ident
    { let (buf,fin,m,args) = sargs in
      Lexhelp.add_string buf (ulexeme lexbuf);
      string sargs lexbuf }

 | xinteger
    { let (buf,fin,m,args) = sargs in
      Lexhelp.add_string buf (ulexeme lexbuf);
      string sargs lexbuf }

 | anywhite +
    { let (buf,fin,m,args) = sargs in
      Lexhelp.add_string buf (ulexeme lexbuf);
      string sargs lexbuf }

 | eof
    { let (buf,fin,m,args) = sargs in
      EOF }
 | _
    { let (buf,fin,m,args) = sargs in
      Lexhelp.add_string buf (lexeme lexbuf);
      string sargs lexbuf }

(* REVIEW: consider sharing this code with the 'string' lexer state *)
and vstring sargs = parse
 |  '"' '"'
   { let (buf,fin,m,args) = sargs in
     Lexhelp.add_byte_char buf '\"';
     vstring sargs lexbuf }

 |  '"'
    { let (buf,fin,m,args) = sargs in
      let m2 = getLexerRange lexbuf in
      Lexhelp.call_string_finish fin buf m2 false }

 |  '"''B'
    { let (buf,fin,m,args) = sargs in
      let m2 = getLexerRange lexbuf in
      Lexhelp.call_string_finish fin buf m2 true }

 | newline
    { let (buf,fin,m,args) = sargs in
      mknewline (Prims.parse_int "1") lexbuf;
      Lexhelp.add_string buf (ulexeme lexbuf);
      vstring sargs lexbuf }

 | ident
    { let (buf,fin,m,args) = sargs in
      Lexhelp.add_string buf (ulexeme lexbuf);
      vstring sargs lexbuf }

 | xinteger
    { let (buf,fin,m,args) = sargs in
      Lexhelp.add_string buf (ulexeme lexbuf);
      vstring sargs lexbuf }

 | anywhite +
    { let (buf,fin,m,args) = sargs in
      Lexhelp.add_string buf (ulexeme lexbuf);
      vstring sargs lexbuf }

 | eof
    { let (buf,fin,m,args) = sargs in
      EOF  }
 | _
    { let (buf,fin,m,args) = sargs in
      Lexhelp.add_string buf (lexeme lexbuf);
      vstring sargs lexbuf }

(* WARNING: taking sargs as a single parameter seems to make a difference as to whether *)
(* OCaml takes tailcalls. *)
and comment cargs = parse
 |  char | '"' | '@'
    { let n,m,args = cargs in
      comment(n,m,args) lexbuf  }

 | '(' '*'
    { let n,m,args = cargs in
      comment (n+1,m,args) lexbuf }

 | newline
    { let n,m,args = cargs in
      mknewline (Prims.parse_int "1") lexbuf;
      comment cargs lexbuf }

 | "*)"
    {
      let n,m,args = cargs in
      if n > 1 then comment (n-1,m,args) lexbuf
      else token args lexbuf }

 | [^ '\'' '(' '*' '\n' '\r' '"' ')' '@' ]+
    {
      let n,m,args = cargs in
      comment cargs lexbuf }

 | eof
     { let n,m,args = cargs in
       EOF }

 | _ { let n,m,args = cargs in
       comment(n,m,args) lexbuf }

and fsdoc cargs = parse
 | '(' '*'
    { let n,doc,kw = cargs in
      fsdoc (n+1,doc^"(*",kw) lexbuf }

 // Fsdoc followed by newline is a standalone comment and uses a different
 // token from fsdoc annotations to avoid all grammar ambiguities
 | "*)" newline newline
    { let n,doc,kw = cargs in
	  mknewline (Prims.parse_int "1") lexbuf;
      if n > 1 then fsdoc (n-1,doc^(ulexeme lexbuf),kw) lexbuf
      else FSDOC_STANDALONE(doc,kw) }

 | "*)" newline
    { let n,doc,kw = cargs in
	  mknewline (Prims.parse_int "1") lexbuf;
      if n > 1 then fsdoc (n-1,doc^(ulexeme lexbuf),kw) lexbuf
      else FSDOC(doc,kw) }

 | newline "\\@"
    { let n,doc,kw = cargs in
	  mknewline (Prims.parse_int "1") lexbuf;
	  let nl = trim_right lexbuf (Prims.parse_int "2") in
	  fsdoc(n,doc^nl^"@",kw) lexbuf}

 | newline "@"
	 { let n,doc,kw = cargs in
	   mknewline (Prims.parse_int "1") lexbuf;
	   fsdoc_kw (n,doc,kw) lexbuf}

 | newline
    { let n,doc,kw = cargs in
      mknewline (Prims.parse_int "1") lexbuf;
      fsdoc (n,doc^(ulexeme lexbuf),kw) lexbuf }

 | _ { let n,doc,kw = cargs in
       fsdoc(n,doc^(ulexeme lexbuf),kw) lexbuf }

and fsdoc_kw cargs = parse
 | anywhite*
     {fsdoc_kw cargs lexbuf}
 | ['a'-'z' 'A'-'Z']+
     { let n,doc,kw = cargs in
	   fsdoc_kw_arg(n,doc,kw,ulexeme lexbuf,"") lexbuf }
 | _ { fail lexbuf "Invalid FSDoc keyword" EOF }

and fsdoc_kw_arg cargs = parse
 | newline
     { let n,doc,kw,kwn,kwa = cargs in
	   fsdoc(n,doc^(ulexeme lexbuf),(kwn,kwa)::kw) lexbuf}
 | _ { let n,doc,kw,kwn,kwa = cargs in
       fsdoc_kw_arg(n,doc,kw,kwn,kwa^(ulexeme lexbuf)) lexbuf }

and cpp_filename args = parse
 | ' ' '"' [^ '"']+ '"'
     { let s = trim_both lexbuf (Prims.parse_int "2") (Prims.parse_int "1") in
     let r = getLexerRange lexbuf in
     Range.set_file_of_range r s;
     ignore_endline args lexbuf }

and ignore_endline args = parse
 | ' '* newline
     { token args lexbuf }
