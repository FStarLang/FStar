%{
#light "off"
(*
 Known (intentional) ambiguities: 6 s/r conflicts in total; resolved by shifting
   3 s/r conflicts on BAR
      match  with | P -> match with | Q -> _ | R -> _
      function ...
      try e with | ...

   1 s/r conflict on SEMICOLON
       fun x -> e1 ; e2
     is parsed as
        (fun x -> e1; e2)
     rather than
        (fun x -> e1); e2

   1 s/r conflict on DOT
      A.B ^ .C

   1 s/r conflict on LBRACE
    
      Consider:
          let f (x: y:int & z:vector y{z=z /\ y=0}) = 0
    
      This is parsed as:
        let f (x: (y:int & z:vector y{z=z /\ y=0})) = 0
      rather than:
        let f (x: (y:int & z:vector y){z=z /\ y=0}) = 0

      Analogous ambiguities with -> and * as well.
*)
(* This parser should be switched to Menhir for the following reasons:
   - spurious conflict reported by fsyacc (Menhir & Ocamlyacc only report 6
     conflicts)
   - there's a lot of copy/paste of identical productions for all the operators,
     that would be solved with a %inline directive
   - a lot of the productions would be simplified by the optional and
     separated_list parameterized productions... *)

// (c) Microsoft Corporation. All rights reserved
open Prims
open FStar.List
open FStar.Util
open FStar.Range
open FStar.Options
open FStar.Absyn.Syntax
open FStar.Absyn.Const
open FStar.Absyn.Util
open FStar.Parser.AST
open FStar.Parser.Util
open FStar.Const
open FStar.Ident

let as_frag d ds =
    let rec as_mlist out ((m,r,doc), cur) ds = 
    match ds with
    | [] -> List.rev (Module(m, (mk_decl (TopLevelModule(m)) r doc) ::(List.rev cur))::out)
    | d::ds ->
      begin match d.d with
        | TopLevelModule m' -> 
				Printf.printf "as_frag: another TopLevel\n" ;
				as_mlist (Module(m, (mk_decl (TopLevelModule(m)) r doc) :: (List.rev cur))::out) ((m',d.drange,d.doc), []) ds
        | _ -> as_mlist out ((m,r,doc), d::cur) ds
      end in
    match d.d with
    | TopLevelModule m ->
        let ms = as_mlist [] ((m,d.drange,d.doc), []) ds in
        begin match ms with
        | _::Module(n, _)::_ ->
		// This check hard-fails in dep.num_of_toplevelmods. 
        let msg = "Support for more than one module in a file is deprecated" in
        print2_warning "%s (Warning): %s\n" (string_of_range (range_of_lid n)) msg
        | _ -> ()
        end;
        Inl ms
    | _ ->
        let ds = d::ds in
        iter (function {d=TopLevelModule _; drange=r} -> raise (Error("Unexpected module declaration", r))
                       | _ -> ()) ds;
        Inr ds
%}

%token <bytes> BYTEARRAY
%token <bytes> STRING
%token <string> IDENT
%token <string> NAME
%token <string> TVAR
%token <string> TILDE

/* bool indicates if INT8 was 'bad' max_int+1, e.g. '128'  */
%token <string * bool> INT8
%token <string * bool> INT16
%token <string * bool> INT32
%token <string * bool> INT64
%token <string * bool> INT

%token <string> UINT8
%token <string> UINT16
%token <string> UINT32
%token <string> UINT64
%token <float> IEEE64
%token <char> CHAR
%token <bool> LET
%token <fsdoc> FSDOC
%token <fsdoc> FSDOC_STANDALONE

%token FORALL EXISTS ASSUME NEW LOGIC IRREDUCIBLE UNFOLDABLE INLINE OPAQUE ABSTRACT NOEQUALITY UNOPTEQUALITY PRAGMALIGHT PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS
%token ACTIONS TYP_APP_LESS TYP_APP_GREATER SUBTYPE SUBKIND
%token AND ASSERT BEGIN ELSE END
%token EXCEPTION FALSE L_FALSE FUN FUNCTION IF IN MODULE DEFAULT
%token MATCH OF
%token OPEN REC MUTABLE THEN TRUE L_TRUE TRY TYPE EFFECT VAL
%token WHEN WITH HASH AMP LPAREN RPAREN LPAREN_RPAREN COMMA LARROW RARROW
%token IFF IMPLIES CONJUNCTION DISJUNCTION
%token DOT COLON COLON_COLON SEMICOLON
%token SEMICOLON_SEMICOLON EQUALS PERCENT_LBRACK DOT_LBRACK DOT_LPAREN LBRACK LBRACK_BAR LBRACE BANG_LBRACE
%token BAR_RBRACK UNDERSCORE LENS_PAREN_LEFT LENS_PAREN_RIGHT
%token BAR RBRACK RBRACE DOLLAR
%token PRIVATE REIFIABLE REFLECTABLE REIFY LBRACE_COLON_PATTERN PIPE_RIGHT
%token NEW_EFFECT NEW_EFFECT_FOR_FREE SUB_EFFECT SQUIGGLY_RARROW TOTAL KIND
%token REQUIRES ENSURES
%token MINUS COLON_EQUALS
%token BACKTICK

%token<string>  OPPREFIX OPINFIX0a OPINFIX0b OPINFIX0c OPINFIX0d OPINFIX1 OPINFIX2 OPINFIX3 OPINFIX4

/* These are artificial */
%token EOF

%nonassoc THEN
%nonassoc ELSE

%nonassoc COLON_EQUALS
%left     OPINFIX0a
%left     OPINFIX0b
%left     OPINFIX0c EQUALS
%left     OPINFIX0d
%left     PIPE_RIGHT
%right    OPINFIX1
%left     OPINFIX2 MINUS
%left     OPINFIX3
%left     BACKTICK
%right    OPINFIX4

%start inputFragment
%start term
%type <inputFragment> inputFragment
%type <term> term

%%
inputFragment:
  | maybe_pragma_light decl decls EOF
    { as_frag $2 $3 }

maybe_pragma_light:
  |     {}
  | PRAGMALIGHT STRING
        {}

pragma:
  | PRAGMA_SET_OPTIONS STRING
    {
       let s = string_of_bytes $2 in
       SetOptions s
    }

  | PRAGMA_RESET_OPTIONS maybeOptions
    { ResetOptions $2 }

maybeOptions:
  |         { None    }
  | STRING  { Some (string_of_bytes $1) }

maybeDoc:
  |  { None }
  | FSDOC { Some $1 }

decls:
  |   { [] }
  | SEMICOLON_SEMICOLON maybeDoc term
      { [mk_decl (Main $3) (rhs2 parseState 1 3) $2] }
  | decl decls
      { ($1::$2) }
    
decl:
  | FSDOC decl2 { mk_decl $2 (rhs parseState 2) (Some $1) }
  | decl2       { mk_decl $1 (rhs parseState 1) None }

decl2:
  | OPEN qname
      { Open $2 }
  | MODULE name EQUALS qname
      {  ModuleAbbrev($2, $4) }
  | MODULE qname
      {  TopLevelModule $2  }
  | kind_abbrev
      { $1 }
  | tycon
      { $1 }
  | qualifiers LET letqualifier letbinding letbindings
      {
        let r, focus = $3 in
        let lbs = focusLetBindings ((focus, $4)::$5) (rhs2 parseState 1 5) in
        ToplevelLet($1, r, lbs)
      }
  | qualifiers VAL ident COLON typ
      { Val($1, $3, $5) }
  | assumeTag name COLON formula
      { Assume($1, $2, $4) }
  | EXCEPTION name of_typ
      { Exception($2, $3) }
  | qualifiers NEW_EFFECT new_effect
      { NewEffect ($1, $3) }
  | qualifiers SUB_EFFECT sub_effect
      { SubEffect $3 }
  | qualifiers NEW_EFFECT_FOR_FREE effect_definition
      { NewEffectForFree ($1, $3) }
  | pragma
      { Pragma $1 }
  | FSDOC_STANDALONE
      { Fsdoc $1 }

tycon:
  | qualifiers TYPE tyconDefinition tyconDefinitions
      { Tycon ($1, List.map (fun (f,doc) -> (f false, doc)) (($3,None)::$4)) }

  | qualifiers EFFECT tyconDefinition
      { Tycon(Effect::$1, [($3 true, None)]) }

kind_abbrev:
  | KIND eitherName binders EQUALS kind
      { KindAbbrev($2, $3, $5) }

new_effect:
  | effect_redefinition
    { $1 }
  | effect_definition
    { $1 }

effect_redefinition:
  | name EQUALS simpleTerm
      {
         RedefineEffect($1, [], $3)
      }

effect_definition:
  | LBRACE name binders COLON kind
    	   WITH effect_decl
	   	more_effect_decls
		actions
    RBRACE
      {
         DefineEffect($2, $3, $5, $7::$8, $9)
      }

actions:
 |				    { [] }
 | AND ACTIONS effect_decls	    { $3 }

effect_decls:
 |				 { []     }
 | effect_decl more_effect_decls { $1::$2 }
 
effect_decl:
  | ident EQUALS simpleTerm
    {
        mk_decl (Tycon ([], [(TyconAbbrev($1, [], None, $3), None)])) (rhs2 parseState 1 3) None
    }

more_effect_decls:
  |                                         { []     }
  | SEMICOLON effect_decl more_effect_decls { $2::$3 }


sub_effect:
  | qname SQUIGGLY_RARROW qname EQUALS simpleTerm
      {
        {
          msource=$1;
          mdest=$3;
          lift_op=NonReifiableLift $5
        }
      }
  | qname SQUIGGLY_RARROW qname
    LBRACE
       ident EQUALS simpleTerm SEMICOLON 
       ident EQUALS simpleTerm
    RBRACE {
    	let id1, tm1 = $5.idText, $7 in
	let id2, tm2 = $9.idText, $11 in
	let lift_wp, lift = match id1, id2 with
	    | "lift_wp", "lift" -> tm1, tm2
	    | "lift", "lift_wp" -> tm2, tm1
	    | _ -> raise (Error("Unexpected identifier; expected {'lift', 'lift_wp'}", lhs parseState)) in
        {
          msource=$1;
          mdest=$3;
          lift_op=ReifiableLift(lift_wp, lift)
        }
    }
  
qualifier:
  | ASSUME        { Assumption }
  | INLINE        { Inline }
  | UNFOLDABLE    { Unfoldable }
  | IRREDUCIBLE   { Irreducible }
  | DEFAULT       { DefaultEffect }
  | TOTAL         { TotalEffect }
  | PRIVATE       { Private }
  | ABSTRACT      { Abstract }
  | NOEQUALITY    { Noeq }
  | UNOPTEQUALITY { Unopteq }
  | NEW           { New }
  | LOGIC         { Logic }
  | OPAQUE        { Opaque }
  | REIFIABLE     { Reifiable }
  | REFLECTABLE   { Reflectable }

qualifiers:
  |                      { [] }
  | qualifier qualifiers { $1::$2 }

assumeTag:
  | ASSUME { [Assumption] }

tyconDefinition:
  | eitherName typars ascribeKindOpt tyconDefn
      { $4 $1 $2 $3 }

tyconDefinitions:
  |   { [] }
  | AND maybeDoc tyconDefinition tyconDefinitions
      { ($3,$2)::$4 }

maybeFocus:
  |  { false }
  | SQUIGGLY_RARROW { true }

letqualifier:
  | maybeFocus REC      { Rec, $1 }
  | MUTABLE             { Mutable, false }
  |                     { NoLetQualifier, false }


letbindings:
  | AND maybeFocus letbinding letbindings
      { ($2, $3)::$4 }
  |   { [] }

letbinding:
  | pattern ascribeTypOpt EQUALS term
      {
        match $2 with
          | None -> ($1, $4)
          | Some t -> (mk_pattern (PatAscribed($1, t)) (rhs2 parseState 1 2), $4)
      }

pattern:
  | tuplePattern { $1 }
  | operatorPattern { $1 }


tuplePattern:
  | listPattern patternListComma
      {
        match $2 with
          | [] -> $1
          | _ -> mk_pattern (PatTuple($1::$2, false)) (rhs2 parseState 1 2)
      }

operatorPattern:
  | LPAREN OPPREFIX RPAREN
      { mk_pattern (PatOp($2)) (rhs2 parseState 1 3) }
  | LPAREN OPINFIX0a RPAREN
      { mk_pattern (PatOp($2)) (rhs2 parseState 1 3) }
  | LPAREN OPINFIX0b RPAREN
      { mk_pattern (PatOp($2)) (rhs2 parseState 1 3) }
  | LPAREN OPINFIX0c RPAREN
      { mk_pattern (PatOp($2)) (rhs2 parseState 1 3) }
  | LPAREN OPINFIX0d RPAREN
      { mk_pattern (PatOp($2)) (rhs2 parseState 1 3) }
  | LPAREN OPINFIX1 RPAREN
      { mk_pattern (PatOp($2)) (rhs2 parseState 1 3) }
  | LPAREN OPINFIX2 RPAREN
      { mk_pattern (PatOp($2)) (rhs2 parseState 1 3) }
  | LPAREN OPINFIX3 RPAREN
      { mk_pattern (PatOp($2)) (rhs2 parseState 1 3) }
  | LPAREN OPINFIX4 RPAREN
      { mk_pattern (PatOp($2)) (rhs2 parseState 1 3) }



patternListComma:
  |   { [] }
  | COMMA listPattern patternListComma { $2::$3 }

listPattern:
  | appPattern consPattern
      {
        match $2 with
          | None -> $1
          | Some tl -> mk_pattern (consPat (rhs parseState 2) $1 tl) (rhs2 parseState 1 2)
      }

consPattern:
  |  { None }
  |  COLON_COLON appPattern consPattern
      {
        match $3 with
          | None -> Some $2
          | Some tl -> Some (mk_pattern (consPat (rhs parseState 1) $2 tl) (rhs2 parseState 1 3))
      }

appPattern:
  | atomicPattern atomicPatterns
      {
        let hd = $1 in
        let r = rhs parseState 1 in
        match $2 with
          | [] -> hd
          | _ -> mk_pattern (PatApp(hd, $2)) (union_ranges r (rhs parseState 1))
      }

atomicPatterns:
  |    { [] }
  | atomicPattern atomicPatterns { $1::$2 }

atomicPattern:
  | atomicPattern2 { mk_pattern $1 (rhs parseState 1) }

atomicPattern2:
  | nonTvarPattern2 { $1 }
  | tvar  { PatTvar ($1, None) }

nonTvarPattern:
  | nonTvarPattern2 { mk_pattern $1 (rhs parseState 1) }

nonTvarPattern2:
  | UNDERSCORE { PatWild }
  | constant { PatConst $1 }
  | HASH ident { PatVar($2, Some Implicit) }
  | DOLLAR ident { PatVar($2, Some Equality) }
  | ident { PatVar($1, None)  }
  | qname { PatName $1 }
  | LBRACK patternListSemiColon RBRACK { PatList $2 }
  | LPAREN ascriptionOrPattern RPAREN { $2 }
  | LBRACE recordPattern RBRACE { PatRecord $2 }
  | LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
      {
        let args = $2::$4::$5 in
        PatTuple(args, true)
      }

ascriptionOrPattern:
  |  nonTvarPattern COLON typ refineOpt
      {
        match $4 with
          | None -> PatAscribed($1, $3)
              | Some phi ->
                let t = match $1.pat with
                  | PatVar(x, _) ->
                    mk_term (Refine(mk_binder (Annotated(x, $3)) (rhs2 parseState 1 3) Type None, phi)) (rhs2 parseState 1 4) Type
                  | _ -> errorR(Error("Not a valid refinement type", lhs(parseState))); $3 in
                PatAscribed($1, t)
      }
  |  pattern                { $1.pat }

patternListSemiColon:
  |   { [] }
  | pattern patternListSemiColonRest { $1::$2 }

patternListSemiColonRest:
  |  { [] }
  | SEMICOLON pattern patternListSemiColonRest { $2::$3 }


recordPattern:
  | lid EQUALS pattern moreFieldPatterns { ($1,$3)::$4 }

moreFieldPatterns:
  | { [] }
  | SEMICOLON lid EQUALS pattern moreFieldPatterns { ($2,$4)::$5 }

binder:
  | ident { mk_binder (Variable($1)) (rhs parseState 1) Type None  }
  | tvar  { mk_binder (TVariable($1)) (rhs parseState 1) Kind None  }
  | LPAREN aqual_opt ident COLON typ refineOpt RPAREN
     { mkRefinedBinder $3 $5 $6 (rhs2 parseState 1 7) $2 }

typars:
  | tvarinsts              { $1 }
  | binders                { $1 }

tvarinsts:
  | TYP_APP_LESS tvars TYP_APP_GREATER    { map (fun tv -> mk_binder (TVariable(tv)) tv.idRange Kind None) $2 }

aqual_opt:
  | HASH   { Some Implicit }
  | EQUALS
    {
    if universes()
    then print1 "%s (Warning): The '=' notation for equality constraints on binders is deprecated; use '$' instead\n" (string_of_range (lhs parseState));
    Some Equality
    }
  | DOLLAR  { Some Equality }
  |        { None }

binders:
  | binder binders { $1::$2 }
  |                { []     }

tyconDefn:
  |               { (fun id binders kopt eff -> if not eff then check_id id; TyconAbstract(id, binders, kopt)) }
  | EQUALS typ    { (fun id binders kopt eff -> if not eff then check_id id; TyconAbbrev(id, binders, kopt, $2)) }
  | EQUALS LBRACE recordFieldDecl recordFields RBRACE { (fun id binders kopt eff -> if not eff then check_id id; TyconRecord(id, binders, kopt, $3::$4)) }
  | EQUALS constructors { (fun id binders kopt eff -> if not eff then check_id id; TyconVariant(id, binders, kopt, $2)) }


recordFields:
  | SEMICOLON recordFieldDecl recordFields
      { $2::$3 }
  | SEMICOLON { [] }
  |   { [] }


constructors:
  |   { [] }
  | constructors constructorDecl
      { $1@[$2] }

recordFieldDecl:
  |  FSDOC ident COLON typ 
      { ($2, $4, Some $1) } 
  |  ident COLON typ 
      { ($1, $3, None) } 

constructorDecl:
  | BAR maybeDoc name COLON typ
      { ($3,Some $5,$2,false) }
  | BAR maybeDoc name of_typ
      { ($3,$4,$2,true) }

of_typ:
  |        {  None }
  | OF typ { Some $2 }

eitherQname:
  | eitherpath { lid_of_ids $1 }

eitherpath:
  | ident { [$1] }
  | name maybeMorePath { $1::$2 }

maybeMorePath:
  |       { [] }
  | DOT eitherpath  { $2 }

lid:
  | idpath { lid_of_ids $1 }

qname:
  | namepath { lid_of_ids $1 }

eitherName:
  | ident { $1 }
  | name  { $1 }

ident:
  | IDENT
      { mk_ident($1, rhs parseState 1)}

name:
  | NAME
      { mk_ident($1, rhs parseState 1) }

tvars:
  | TVAR                { [mk_ident($1, rhs parseState 1)] }
  | TVAR COMMA tvars    { mk_ident($1, rhs parseState 1) ::$3 }

tvar:
  | TVAR
      { mk_ident($1, rhs parseState 1) }

namepath:
  | name
      { [$1] }
  | name DOT namepath
      { $1::$3 }

idpath:
  | ident
      { [$1] }
  | name DOT idpath
      { $1::$3 }

ascribeTypOpt:
  |              { None }
  | COLON tmArrowNoEquals { Some $2 }

ascribeKindOpt:
  |               { None }
  | COLON  kind { Some $2 }

kind:
  | tmArrowNoEquals { {$1 with level=Kind} }

typ:
  | simpleTerm  { $1 }

  | FORALL binders DOT qpat noSeqTerm
      {
        match $2 with
            | [] -> raise (Error("Missing binders for a quantifier", rhs2 parseState 1 2))
            | _ -> mk_term (QForall($2,$4,$5)) (rhs2 parseState 1 5) Formula
      }

  | EXISTS binders DOT qpat noSeqTerm
      {
        match $2 with
            | [] -> raise (Error("Missing binders for a quantifier", rhs2 parseState 1 2))
            | _ -> mk_term (QExists($2,$4,$5)) (rhs2 parseState 1 5) Formula
      }

term:
  | noSeqTerm
      { $1 }

  | noSeqTerm SEMICOLON term
      { mk_term (Seq($1, $3)) (rhs2 parseState 1 3) Expr }


noSeqTerm:
  | typ  { $1 }

  | atomicTerm DOT_LBRACK term RBRACK LARROW noSeqTerm
      { mk_term (Op(".[]<-", [ $1; $3; $6 ])) (rhs2 parseState 1 6) Expr }

  | atomicTerm DOT_LPAREN term RPAREN LARROW noSeqTerm
      { mk_term (Op(".()<-", [ $1; $3; $6 ])) (rhs2 parseState 1 6) Expr }

  | REQUIRES typ
     {
        let pos = rhs2 parseState 1 3 in
        mk_term (Requires($2, None)) pos Type
     }

    
  | ENSURES typ
     {
        let pos = rhs2 parseState 1 3 in
        mk_term (Ensures($2, None)) pos Type
     }

  | IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
      {
        mk_term (If($2, $4, $6)) (rhs2 parseState 1 6) Expr
      }

  | IF noSeqTerm THEN noSeqTerm
      {
        let e = mk_term (Const Const_unit) (rhs2 parseState 4 4) Expr in
        mk_term (If($2, $4, e)) (rhs2 parseState 1 4) Expr
      }

  | TRY term WITH firstPatternBranch patternBranches
      {
         let branches = focusBranches ($4::$5) (rhs2 parseState 1 5) in
         mk_term (TryWith($2, branches)) (rhs2 parseState 1 5) Expr
      }

  | MATCH term WITH patternBranches
      { 
        let branches = focusBranches $4 (rhs2 parseState 1 4) in
        mk_term (Match($2, branches)) (rhs2 parseState 1 4) Expr
      }

  | LET OPEN qname IN term
      { mk_term (LetOpen($3, $5)) (rhs2 parseState 1 5) Expr }

  | LET letqualifier letbinding letbindings IN term
      {
        let r, focus = $2 in
        let lbs = focusLetBindings ((focus,$3)::$4) (rhs2 parseState 2 4) in
        mk_term (Let(r, lbs, $6)) (rhs2 parseState 1 6) Expr
      }

  | FUNCTION firstPatternBranch patternBranches
      {
        let branches = focusBranches ($2::$3) (rhs2 parseState 1 3) in
        mk_function branches (lhs parseState) (rhs2 parseState 1 3)
      }

  | ASSUME atomicTerm
      { mkExplicitApp (mk_term (Var assume_lid) (rhs parseState 1) Expr) [$2]
          (rhs2 parseState 1 2)
      }

  | ident LARROW noSeqTerm
      { mk_term (Assign($1, $3)) (rhs2 parseState 1 3) Expr }

qpat:
  |   { [] }
  | LBRACE_COLON_PATTERN disjunctivePats RBRACE
      { $2 }

morePats:
  |  { [] }
  | SEMICOLON conjunctivePat  { $2 }

disjunctivePats:
 | conjunctivePat   { [$1] }
 | conjunctivePat DISJUNCTION disjunctivePats { $1::$3 }

conjunctivePat:
 | appTerm morePats { $1::$2 }

simpleTerm:
  | tmIff { $1 }

  | FUN atomicPattern atomicPatterns funArrow term
      {
        $4 (Abs($2::$3, $5)) (rhs2 parseState 1 5)
      }

patternBranches:
  |   { [] }
  | patternBranches patternBranch
      { $1@[$2] }

maybeBar:
  |     {()}
  | BAR {()}

maybeFocusArrow:
  | RARROW          { false }
  | SQUIGGLY_RARROW { true }

firstPatternBranch: /* shift/reduce conflict on BAR ... expected for nested matches */
  | maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
      {
        let pat = match $2 with
          | [p] -> p
          | ps -> mk_pattern (PatOr ps) (rhs2 parseState 1 2) in
        ($4, (pat, $3, $5))
      }

patternBranch: /* shift/reduce conflict on BAR ... expected for nested matches */
  | BAR disjunctivePattern maybeWhen maybeFocusArrow term
      {
        let pat = match $2 with
          | [p] -> p
          | ps -> mk_pattern (PatOr ps) (rhs2 parseState 1 2) in
        ($4, (pat, $3, $5))
      }

disjunctivePattern:
  | pattern     { [$1] }
  | pattern BAR disjunctivePattern { $1::$3 }

maybeWhen:
  |             { None }
  | WHEN tmDisjunction { Some $2 }

funArrow:
  | RARROW { fun t r -> mk_term t r Un }

tmIff:
  | tmImplies IFF tmIff
      {
        mk_term (Op("<==>", [$1; $3])) (rhs2 parseState 1 3) Formula
      }

  | tmImplies
      { $1 }

tmImplies:
  | tmArrow IMPLIES tmImplies
      {
        mk_term (Op("==>", [$1; $3])) (rhs2 parseState 1 3) Formula
      }

  | tmArrow
      { $1 }

// FIXME once we switch to menhir (duplication)
tmArrowNoEquals:
  | arrowDomainNoEquals RARROW tmArrowNoEquals
     {
        let aq, tm = $1 in
        let b = match extract_named_refinement tm with
            | None -> mk_binder (NoName tm) (rhs parseState 1) Un aq
            | Some (x, t, f) -> mkRefinedBinder x t f (rhs2 parseState 1 1) aq in
        mk_term (Product([b], $3)) (rhs2 parseState 1 3)  Un
    
     }

  | tmCons
      { $1 }

arrowDomainNoEquals:
  | aqual tmCons { (Some $1, $2) }
  | tmCons      { (None, $1)    }

tmArrow:
  | arrowDomain RARROW tmArrow
     {
        let aq, tm = $1 in
        let b = match extract_named_refinement tm with
            | None -> mk_binder (NoName tm) (rhs parseState 1) Un aq
            | Some (x, t, f) -> mkRefinedBinder x t f (rhs2 parseState 1 1) aq in
        mk_term (Product([b], $3)) (rhs2 parseState 1 3)  Un
    
     }

  | tmDisjunction
      { $1 }

arrowDomain:
  | aqual tmDisjunction { (Some $1, $2) }
  | tmDisjunction      { (None, $1)    }

tmDisjunction:
  | tmDisjunction DISJUNCTION tmConjunction
      { mk_term (Op("\\/", [$1;$3])) (rhs2 parseState 1 3) Formula }

  | tmConjunction
      { $1 }

tmConjunction:
  | tmConjunction CONJUNCTION tmTuple
      { mk_term (Op("/\\", [$1;$3])) (rhs2 parseState 1 3) Formula }

  | tmTuple
      { $1 }

tmTuple:
  | tupleN
      {
        match $1 with
          | [x] -> x
          | components -> mkTuple components (rhs2 parseState 1 1)
      }


tmEq:
  | tmEq BACKTICK lid BACKTICK tmEq
      { mkApp (mk_term (Var $3) (rhs2 parseState 2 4) Un) [ $1, Nothing; $5, Nothing ] (rhs2 parseState 1 5) }
  | tmEq OPINFIX0a tmEq
      { mk_term (Op($2, [$1; $3])) (rhs2 parseState 1 3) Un}
  | tmEq OPINFIX0b tmEq
      { mk_term (Op($2, [$1; $3])) (rhs2 parseState 1 3) Un}
  | tmEq OPINFIX0c tmEq
      { mk_term (Op($2, [$1; $3])) (rhs2 parseState 1 3) Un}
  | tmEq EQUALS tmEq
      { mk_term (Op("=", [$1; $3])) (rhs2 parseState 1 3) Un}
  | tmEq COLON_EQUALS tmEq
      { mk_term (Op(":=", [$1; $3])) (rhs2 parseState 1 3) Un}
  | tmEq OPINFIX0d tmEq
      { mk_term (Op($2, [$1; $3])) (rhs2 parseState 1 3) Un}
  | tmEq PIPE_RIGHT tmEq
      { mk_term (Op("|>", [$1; $3])) (rhs2 parseState 1 3) Un}
  | tmEq OPINFIX1 tmEq
      { mk_term (Op($2, [$1; $3])) (rhs2 parseState 1 3) Un}
  | tmEq OPINFIX2 tmEq
      { mk_term (Op($2, [$1; $3])) (rhs2 parseState 1 3) Un}
  | tmCons
      { $1 }

tmCons:
  | dtupleTerm COLON_COLON tmCons
      { consTerm (rhs parseState 2) $1 $3 }

  | dtupleTerm
      { $1 }

dtupleTerm:
  | arithTerm AMP dtupleTerm
      {
        let x, t, f = match extract_named_refinement $1 with
            | Some (x, t, f) -> x, t, f
            | _ -> raise (Error("Missing binder for the first component of a dependent tuple", rhs2 parseState 1 2)) in
        let dom = mkRefinedBinder x t f (rhs2 parseState 1 2) None in
        let tail = $3 in
        let dom, res = match tail.tm with
            | Sum(dom', res) -> dom::dom', res
            | _ -> [dom], tail in
        mk_term (Sum(dom, res)) (rhs2 parseState 1 6) Type
      }

  | arithTerm
     { $1 }

arithTerm:
  | arithTerm MINUS arithTerm
      { mk_term (Op("-", [$1; $3])) (rhs2 parseState 1 3) Un}
  | arithTerm OPINFIX3 arithTerm
      { mk_term (Op($2, [$1; $3])) (rhs2 parseState 1 3) Un}
  | arithTerm OPINFIX4 arithTerm
      { mk_term (Op($2, [$1; $3])) (rhs2 parseState 1 3) Un}
  | MINUS arithTerm
      { mk_uminus $2 (rhs2 parseState 1 3) Expr }
  | refinementTerm
      { $1 }

refinementTerm:
  | ident COLON appTerm
      {
        mk_term (NamedTyp($1, $3)) (rhs2 parseState 1 3) Type
      }
    
  | ident COLON appTerm LBRACE formula RBRACE
      {
        mk_term (Refine(mk_binder (Annotated($1, $3)) (rhs2 parseState 1 3) Type None, $5))
        (rhs2 parseState 1 6) Type
      }
    
  | LBRACE recordExp RBRACE { $2 }

  | unaryTerm { $1 }

aqual:
  | HASH      { Implicit }
  | EQUALS    { if universes()
                then print1 "%s (Warning): The '=' notation for equality constraints on binders is deprecated; use '$' instead\n" (string_of_range (lhs parseState));
				Equality }
  | DOLLAR    { Equality }

refineOpt:
  |                       { None }
  | LBRACE formula RBRACE { Some $2 }



unaryTerm:
  | TILDE atomicTerm
      { mk_term (Op($1, [$2])) (rhs2 parseState 1 3) Formula }

  | appTerm { $1 }

appTerm:
  | indexingTerm hashIndexingTerms
      {
        mkApp $1 $2 (rhs2 parseState 1 2)
      }

indexingTerm:
  | atomicTerm DOT_LPAREN term RPAREN
      { mk_term (Op(".()", [ $1; $3 ])) (rhs2 parseState 1 4) Expr }
  | atomicTerm DOT_LBRACK term RBRACK
      { mk_term (Op(".[]", [ $1; $3 ])) (rhs2 parseState 1 4) Expr }
  | atomicTerm
      { $1 }

formula:
  | noSeqTerm
      { {$1 with level=Formula} }

atomicTerm:
  | UNDERSCORE { mk_term Wild (rhs parseState 1) Un }
  | ASSERT   { mk_term (Var assert_lid) (rhs parseState 1) Expr }
  | tvar     { mk_term (Tvar($1)) (rhs parseState 1) Type }
  | constant { mk_term (Const $1) (rhs parseState 1) Expr }
  | L_TRUE   { mk_term (Name (lid_of_path ["True"] (rhs parseState 1))) (rhs parseState 1) Type }
  | L_FALSE   { mk_term (Name (lid_of_path ["False"] (rhs parseState 1))) (rhs parseState 1) Type }

  | OPPREFIX atomicTerm
      { mk_term (Op($1, [$2])) (rhs2 parseState 1 3) Expr }

  | LPAREN OPPREFIX RPAREN
      { mk_term (Op($2, [])) (rhs2 parseState 1 3) Un }
  | LPAREN OPINFIX0a RPAREN
      { mk_term (Op($2, [])) (rhs2 parseState 1 3) Un }
  | LPAREN OPINFIX0b RPAREN
      { mk_term (Op($2, [])) (rhs2 parseState 1 3) Un }
  | LPAREN OPINFIX0c RPAREN
      { mk_term (Op($2, [])) (rhs2 parseState 1 3) Un }
  | LPAREN OPINFIX0d RPAREN
      { mk_term (Op($2, [])) (rhs2 parseState 1 3) Un }
  | LPAREN OPINFIX1 RPAREN
      { mk_term (Op($2, [])) (rhs2 parseState 1 3) Un }
  | LPAREN OPINFIX2 RPAREN
      { mk_term (Op($2, [])) (rhs2 parseState 1 3) Un }
  | LPAREN OPINFIX3 RPAREN
      { mk_term (Op($2, [])) (rhs2 parseState 1 3) Un }
  | LPAREN OPINFIX4 RPAREN
      { mk_term (Op($2, [])) (rhs2 parseState 1 3) Un }
  | LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
      {
        match $2 with
          | [x] -> x
          | components -> mkDTuple components (rhs2 parseState 1 1)
      }
  | projectionLHS maybeFieldProjections
      {
        fold_left (fun e f ->
                          mk_term (Project(e, lid_of_ids [f])) (rhs2 parseState 1 3) Expr )
          $1 $2
      }
  | BEGIN term END
      { $2 }

maybeFieldProjections:
  |    { [] }
  | maybeFieldProjections DOT ident
      { $1@[$3] }

targs:
  | atomicTerm { [$1] }
  | atomicTerm COMMA targs { $1::$3 }

maybeInsts:
  |    { (fun x -> x) }
  | TYP_APP_LESS targs TYP_APP_GREATER
      {
        (fun (x:term) -> mkFsTypApp x $2
          (union_ranges x.range (rhs2 parseState 1 3)))
      }

projectionLHS:
  | eitherQname maybeInsts
      {
        let t = if is_name $1 then Name $1 else Var $1 in
        $2 (mk_term t (rhs parseState 1) Un)
      }
  | LPAREN term maybeWithSort RPAREN
      { mk_term (Paren($3 $2 (rhs2 parseState 2 3))) (rhs2 parseState 1 4) ($2.level) }
  | LBRACK_BAR semiColonTermList BAR_RBRACK
      {
        let l = mkConsList (rhs2 parseState 1 3) $2 in
        mkExplicitApp (mk_term (Var (array_mk_array_lid)) (rhs2 parseState 1 3) Expr)
              [l] (rhs2 parseState 1 3)
      }
  | LBRACK semiColonTermList RBRACK
      {
        mkConsList (rhs2 parseState 1 3) $2
      }
  | PERCENT_LBRACK semiColonTermList RBRACK
      {
        mkLexList (rhs2 parseState 1 3) $2
      }

  | BANG_LBRACE commaTermList RBRACE
      {
        mkRefSet (rhs2 parseState 1 3) $2
      }
    
commaTermList:
  |  { [] }
  | appTerm moreCommaTerms
      { $1::$2 }

moreCommaTerms:
  |   { [] }
  | COMMA appTerm moreCommaTerms
      { $2::$3 }


semiColonTermList:
  |  { [] }
  | noSeqTerm moreSemiColonTerms
      { $1::$2 }

moreSemiColonTerms:
  |   { [] }
  | SEMICOLON { [] }
  | SEMICOLON noSeqTerm moreSemiColonTerms
      { $2::$3 }

recordExp:
  | appTerm recordExpRest
      { $2 $1 (lhs parseState) }

recordExpRest:
  | WITH recordFieldAssignment recordFieldAssignments
      {
        (fun e r -> mk_term (Record(Some e, $2::$3)) (union_ranges r (rhs2 parseState 1 3)) Expr)
      }

  | EQUALS simpleTerm recordFieldAssignments
      {
        (fun e r -> match e.tm with
          | Var l -> mk_term (Record(None, (l,$2)::$3)) (union_ranges r (rhs2 parseState 1 3)) Expr
          | _ -> errorR(Error("Record field names must be constant identifiers", lhs(parseState)));
            mk_term (Record(None, $3)) (rhs2 parseState 1 3) Expr)
      }

recordFieldAssignment:
  | lid EQUALS simpleTerm
      { ($1,$3) }

recordFieldAssignments:
  |           { [] }
  | SEMICOLON { [] }
  | SEMICOLON recordFieldAssignment recordFieldAssignments
     { $2::$3 }

maybeWithSort:
  |     { fun x r -> x }
  | hasSort simpleTerm
        { fun x r -> mk_term (Ascribed(x,{$2 with level=$1})) (union_ranges r (rhs2 parseState 1 2)) $1 }
hasSort:
  | SUBTYPE { Expr }
  | SUBKIND { Type }

maybeHash:
  |      { Nothing }
  | HASH { Hash }

hashIndexingTerms:
  |        { [] }
  | maybeHash indexingTerm hashIndexingTerms { ($2, $1)::$3 }

tupleN:
  | tmEq                       { [$1] }
  | tmEq COMMA tupleN       { $1::$3 }

constant:
  | LPAREN_RPAREN { Const_unit }
  | INT
     {
        if snd $1 then
          errorR(Error("This number is outside the allowable range for representable integer constants", lhs(parseState)));
        Const_int (fst $1, None)
     }
  | CHAR { Const_char $1 }
  | STRING { Const_string ($1,lhs(parseState)) }
  | BYTEARRAY { Const_bytearray ($1,lhs(parseState)) }
  | TRUE { Const_bool true }
  | FALSE { Const_bool false }
  | IEEE64 { Const_float $1 }
  | UINT8 { Const_int ($1, Some (Unsigned, Int8)) }
  | INT8
      {
        if snd $1 then
          errorR(Error("This number is outside the allowable range for 8-bit signed integers", lhs(parseState)));
        Const_int (fst $1, Some (Signed, Int8))
      }
  | UINT16 { Const_int ($1, Some (Unsigned, Int16)) }
  | INT16
      {
        if snd $1 then
          errorR(Error("This number is outside the allowable range for 16-bit signed integers", lhs(parseState)));
        Const_int (fst $1, Some (Signed, Int16))
      }
  | UINT32 { Const_int ($1, Some (Unsigned, Int32)) }
  | INT32
      {
        if snd $1 then
          errorR(Error("This number is outside the allowable range for 32-bit signed integers", lhs(parseState)));
        Const_int (fst $1, Some (Signed, Int32))
      }
  | UINT64 { Const_int ($1, Some (Unsigned, Int64)) }
  | INT64
      {
        if snd $1 then
          errorR(Error("This number is outside the allowable range for 64-bit signed integers", lhs(parseState)));
        Const_int (fst $1, Some (Signed, Int64))
      }
  | REIFY   { Const_reify }
