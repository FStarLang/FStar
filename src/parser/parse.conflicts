
** Conflict (shift/reduce) in state 792.
** Token involved: LBRACK_AT_AT
** This state is reached from inputFragment after reading:

boption(__anonymous_0) list(decoration) TYPE ident typars option(ascribeKind) EQUALS 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

inputFragment 
boption(__anonymous_0) list(decl) EOF 
                       (?)

** In state 792, looking ahead at LBRACK_AT_AT, shifting is permitted
** because of the following sub-derivation:

decl list(decl) 
list(decoration) rawDecl 
                 TYPE separated_nonempty_list(AND,typeDecl) 
                      typeDecl 
                      ident typars option(ascribeKind) typeDefinition 
                                                       EQUALS typ 
                                                              simpleTerm 
                                                              tmIff 
                                                              tmImplies IFF tmIff 
                                                              tmArrow(tmFormula) IMPLIES tmImplies 
                                                              binderAttributes tmFormula RARROW tmArrow(tmFormula) 
                                                              . LBRACK_AT_AT right_flexible_list(SEMICOLON,noSeqTerm) RBRACK 

** In state 792, looking ahead at LBRACK_AT_AT, reducing production
** list(constructorDecl) -> 
** is permitted because of the following sub-derivation:

decl list(decl) // lookahead token appears because list(decl) can begin with LBRACK_AT_AT
list(decoration) rawDecl // lookahead token is inherited
                 TYPE separated_nonempty_list(AND,typeDecl) // lookahead token is inherited
                      typeDecl // lookahead token is inherited
                      ident typars option(ascribeKind) typeDefinition // lookahead token is inherited
                                                       EQUALS list(constructorDecl) // lookahead token is inherited
                                                              . 

** Conflict (shift/reduce) in state 780.
** Token involved: LBRACK_AT_AT
** This state is reached from inputFragment after reading:

boption(__anonymous_0) list(decoration) TYPE ident 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

inputFragment 
boption(__anonymous_0) list(decl) EOF 
                       (?)

** In state 780, looking ahead at LBRACK_AT_AT, shifting is permitted
** because of the following sub-derivation:

decl list(decl) 
list(decoration) rawDecl 
                 TYPE separated_nonempty_list(AND,typeDecl) 
                      typeDecl 
                      ident typars option(ascribeKind) typeDefinition 
                            binders 
                            list(__anonymous_4) 
                            binder list(__anonymous_4) 
                            aqualifiedWithAttrs(lidentOrUnderscore) 
                            binderAttributes lidentOrUnderscore 
                            . LBRACK_AT_AT right_flexible_list(SEMICOLON,noSeqTerm) RBRACK 

** In state 780, looking ahead at LBRACK_AT_AT, reducing production
** list(__anonymous_4) -> 
** is permitted because of the following sub-derivation:

decl list(decl) // lookahead token appears because list(decl) can begin with LBRACK_AT_AT
list(decoration) rawDecl // lookahead token is inherited
                 TYPE separated_nonempty_list(AND,typeDecl) // lookahead token is inherited
                      typeDecl // lookahead token is inherited
                      ident typars option(ascribeKind) typeDefinition // lookahead token is inherited because option(ascribeKind) typeDefinition can vanish
                            binders // lookahead token is inherited
                            list(__anonymous_4) // lookahead token is inherited
                            . 

** Conflict (shift/reduce) in state 743.
** Token involved: BAR
** This state is reached from term after reading:

FUNCTION disjunctivePattern maybeFocusArrow TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch) 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

term 
noSeqTerm 
FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) 
         (?)

** In state 743, looking ahead at BAR, reducing production
** noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch) 
** is permitted because of the following sub-derivation:

reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch // lookahead token appears
patternBranch // lookahead token is inherited
disjunctivePattern maybeFocusArrow term // lookahead token is inherited
                                   noSeqTerm // lookahead token is inherited
                                   TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch) . 

** In state 743, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

patternBranch 
disjunctivePattern maybeFocusArrow term 
                                   noSeqTerm 
                                   TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch) 
                                                 reverse_left_flexible_nonempty_list(BAR,patternBranch) . BAR patternBranch 

** Conflict (shift/reduce) in state 709.
** Token involved: BAR
** This state is reached from term after reading:

FUNCTION disjunctivePattern maybeFocusArrow MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7) 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

term 
noSeqTerm 
FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) 
         (?)

** In state 709, looking ahead at BAR, reducing production
** noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7) 
** is permitted because of the following sub-derivation:

reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch // lookahead token appears
patternBranch // lookahead token is inherited
disjunctivePattern maybeFocusArrow term // lookahead token is inherited
                                   noSeqTerm // lookahead token is inherited
                                   MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7) . 

** In state 709, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

patternBranch 
disjunctivePattern maybeFocusArrow term 
                                   noSeqTerm 
                                   MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7) 
                                                   reverse_left_flexible_list(BAR,__anonymous_7) . BAR patternBranch 

** Conflict (shift/reduce) in state 708.
** Token involved: LBRACK_AT_AT
** This state is reached from inputFragment after reading:

boption(__anonymous_0) ASSUME uident COLON MATCH term WITH 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

inputFragment 
boption(__anonymous_0) list(decl) EOF 
                       (?)

** In state 708, looking ahead at LBRACK_AT_AT, shifting is permitted
** because of the following sub-derivation:

decl list(decl) 
ASSUME uident COLON noSeqTerm 
                    MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7) 
                                    patternBranch 
                                    disjunctivePattern maybeFocusArrow term 
                                    separated_nonempty_list(BAR,tuplePattern) 
                                    tuplePattern 
                                    separated_nonempty_list(COMMA,constructorPattern) 
                                    constructorPattern 
                                    atomicPattern 
                                    aqualifiedWithAttrs(lident) 
                                    binderAttributes lident 
                                    . LBRACK_AT_AT right_flexible_list(SEMICOLON,noSeqTerm) RBRACK 

** In state 708, looking ahead at LBRACK_AT_AT, reducing production
** reverse_left_flexible_list(BAR,__anonymous_7) -> 
** is permitted because of the following sub-derivation:

decl list(decl) // lookahead token appears because list(decl) can begin with LBRACK_AT_AT
ASSUME uident COLON noSeqTerm // lookahead token is inherited
                    MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7) // lookahead token is inherited
                                    . 

** Conflict (shift/reduce) in state 657.
** Token involved: BAR
** This state is reached from term after reading:

FUNCTION disjunctivePattern maybeFocusArrow FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

term 
noSeqTerm 
FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) 
         (?)

** In state 657, looking ahead at BAR, reducing production
** noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) 
** is permitted because of the following sub-derivation:

reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch // lookahead token appears
patternBranch // lookahead token is inherited
disjunctivePattern maybeFocusArrow term // lookahead token is inherited
                                   noSeqTerm // lookahead token is inherited
                                   FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) . 

** In state 657, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

patternBranch 
disjunctivePattern maybeFocusArrow term 
                                   noSeqTerm 
                                   FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) 
                                            reverse_left_flexible_nonempty_list(BAR,patternBranch) . BAR patternBranch 

** Conflict (shift/reduce) in state 486.
** Tokens involved: SEMICOLON_SEMICOLON SEMICOLON
** The following explanations concentrate on token SEMICOLON_SEMICOLON.
** This state is reached from term after reading:

FUNCTION disjunctivePattern maybeFocusArrow noSeqTerm 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

term 
(?)

** In state 486, looking ahead at SEMICOLON_SEMICOLON, reducing production
** term -> noSeqTerm 
** is permitted because of the following sub-derivation:

noSeqTerm SEMICOLON_SEMICOLON term // lookahead token appears
FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) // lookahead token is inherited
         patternBranch // lookahead token is inherited
         disjunctivePattern maybeFocusArrow term // lookahead token is inherited
                                            noSeqTerm . 

** In state 486, looking ahead at SEMICOLON_SEMICOLON, shifting is permitted
** because of the following sub-derivation:

noSeqTerm 
FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) 
         patternBranch 
         disjunctivePattern maybeFocusArrow term 
                                            noSeqTerm . SEMICOLON_SEMICOLON term 

** Conflict (shift/reduce) in state 333.
** Token involved: LBRACK_AT_AT
** This state is reached from inputFragment after reading:

boption(__anonymous_0) list(decoration) TYPE ident binder 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

inputFragment 
boption(__anonymous_0) list(decl) EOF 
                       (?)

** In state 333, looking ahead at LBRACK_AT_AT, shifting is permitted
** because of the following sub-derivation:

decl list(decl) 
list(decoration) rawDecl 
                 TYPE separated_nonempty_list(AND,typeDecl) 
                      typeDecl 
                      ident typars option(ascribeKind) typeDefinition 
                            binders 
                            list(__anonymous_4) 
                            binder list(__anonymous_4) 
                                   binder list(__anonymous_4) 
                                   aqualifiedWithAttrs(lidentOrUnderscore) 
                                   binderAttributes lidentOrUnderscore 
                                   . LBRACK_AT_AT right_flexible_list(SEMICOLON,noSeqTerm) RBRACK 

** In state 333, looking ahead at LBRACK_AT_AT, reducing production
** list(__anonymous_4) -> 
** is permitted because of the following sub-derivation:

decl list(decl) // lookahead token appears because list(decl) can begin with LBRACK_AT_AT
list(decoration) rawDecl // lookahead token is inherited
                 TYPE separated_nonempty_list(AND,typeDecl) // lookahead token is inherited
                      typeDecl // lookahead token is inherited
                      ident typars option(ascribeKind) typeDefinition // lookahead token is inherited because option(ascribeKind) typeDefinition can vanish
                            binders // lookahead token is inherited
                            list(__anonymous_4) // lookahead token is inherited
                            binder list(__anonymous_4) // lookahead token is inherited
                                   . 

** Conflict (shift/reduce) in state 331.
** Token involved: LBRACK_AT_AT
** This state is reached from inputFragment after reading:

boption(__anonymous_0) list(decoration) TYPE ident multiBinder 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

inputFragment 
boption(__anonymous_0) list(decl) EOF 
                       (?)

** In state 331, looking ahead at LBRACK_AT_AT, shifting is permitted
** because of the following sub-derivation:

decl list(decl) 
list(decoration) rawDecl 
                 TYPE separated_nonempty_list(AND,typeDecl) 
                      typeDecl 
                      ident typars option(ascribeKind) typeDefinition 
                            binders 
                            list(__anonymous_4) 
                            multiBinder list(__anonymous_4) 
                                        binder list(__anonymous_4) 
                                        aqualifiedWithAttrs(lidentOrUnderscore) 
                                        binderAttributes lidentOrUnderscore 
                                        . LBRACK_AT_AT right_flexible_list(SEMICOLON,noSeqTerm) RBRACK 

** In state 331, looking ahead at LBRACK_AT_AT, reducing production
** list(__anonymous_4) -> 
** is permitted because of the following sub-derivation:

decl list(decl) // lookahead token appears because list(decl) can begin with LBRACK_AT_AT
list(decoration) rawDecl // lookahead token is inherited
                 TYPE separated_nonempty_list(AND,typeDecl) // lookahead token is inherited
                      typeDecl // lookahead token is inherited
                      ident typars option(ascribeKind) typeDefinition // lookahead token is inherited because option(ascribeKind) typeDefinition can vanish
                            binders // lookahead token is inherited
                            list(__anonymous_4) // lookahead token is inherited
                            multiBinder list(__anonymous_4) // lookahead token is inherited
                                        . 

** Conflict (shift/reduce) in state 126.
** Token involved: LBRACK
** This state is reached from term after reading:

HASH 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

term 
noSeqTerm 
tmIff SUBTYPE tmIff option(__anonymous_6) 
tmImplies IFF tmIff 
tmArrow(tmFormula) IMPLIES tmImplies 
(?)

** In state 126, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

aqual tmFormula RARROW tmArrow(tmFormula) 
HASH . LBRACK thunk(tmNoEq) RBRACK 

** In state 126, looking ahead at LBRACK, reducing production
** aqual -> HASH 
** is permitted because of the following sub-derivation:

aqual tmFormula RARROW tmArrow(tmFormula) // lookahead token appears because tmFormula can begin with LBRACK
HASH . 
