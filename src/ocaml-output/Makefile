HAS_MENHIR := $(shell command -v menhir 2> /dev/null)
MENHIR_MIN_VERSION:=20161115
ifdef HAS_MENHIR
HAS_VALID_MENHIR := $(shell expr `menhir --version | sed -e 's/.*version \([0-9]*\)/\1/'` \>= $(MENHIR_MIN_VERSION))
else
HAS_VALID_MENHIR := 0
endif

include ../../.common.mk

MENHIR=menhir #--explain --infer -la 1 --table
OCAMLLEX=ocamllex
FSTAR_OCAMLBUILD_EXTRAS ?= -cflag -g

FSTAR_HOME = ../..
DUNE_SNAPSHOT ?= $(realpath $(FSTAR_HOME)/ocaml)
export DUNE_SNAPSHOT

FStar_Parser_Parse_ml=$(DUNE_SNAPSHOT)/fstar-lib/generated/FStar_Parser_Parse.ml

# The string "Madoko" if madoko is installed, something else otherwise.
MADOKO = $(shell madoko --version 2>/dev/null | cut -c -6)
DOS2UNIX=$(shell which dos2unix >/dev/null 2>&1 && echo dos2unix || echo true)

# Detect the GNU utilities
INSTALL_EXEC := $(shell ginstall --version 2>/dev/null | cut -c -8 | head -n 1)
FIND=$(shell which gfind >/dev/null 2>&1 && echo gfind || echo find)
ifdef INSTALL_EXEC
   INSTALL_EXEC := ginstall
else
   INSTALL_EXEC := install
endif
export INSTALL_EXEC

# Final sanity check for the OCaml version
OCAML_BRANCH=$(shell ocaml get_branch.ml)

all: dune-snapshot

# We derive parse.mly in two ways:
# - if we have menhir, we generate it from from the Menhir parser
#   ../parser/parse.mly (and save a copy of the generated mly in ../parser/ml)
# - if we don't have menhir, we take the saved copy above that is under version
#   control
parse.mly: ../parser/parse.mly
ifeq ($(HAS_VALID_MENHIR), 1)
	@# TODO : call menhir directly when positions are fixed instead of
	@# letting OCamlbuild go through ocamlyacc
	$(call msg, "MENHIR PREPROCESS")
	$(Q)$(MENHIR) --only-preprocess-for-ocamlyacc $< > $@
else
	$(error Correct version of menhir not found (needs a version newer than $(MENHIR_MIN_VERSION)))
endif

.PHONY: generated-files
generated-files: $(FStar_Parser_Parse_ml) $(FStar_Version_ml)

.PHONY: dune-stdlib-snapshot dune-taclib-snapshot dune-snapshot dune-fstar-snapshot dune-verify-ulib source-files

# FIXME: dune-fstar-snapshot should also depend on dune-verify-ulib,
# once we no longer lax-typecheck
dune-fstar-snapshot:
	+$(MAKE) -C .. ocaml

dune-verify-ulib:
	+$(MAKE) -C ../../ulib

dune-stdlib-snapshot: dune-verify-ulib
	$(MAKE) -C ../../ulib -f Makefile.extract-stdlib dune-snapshot

dune-taclib-snapshot: dune-verify-ulib
	$(MAKE) -C ../../ulib -f Makefile.extract-taclib dune-snapshot

dune-snapshot: generated-files dune-fstar-snapshot dune-stdlib-snapshot dune-taclib-snapshot

$(FStar_Parser_Parse_ml): parse.mly
	@# We are opening the same module twice but we need these modules
	@# open for the definition of tokens
	$(Q)echo "open Prims" > $@
	$(Q)echo "open FStar_Errors" >> $@
	$(Q)echo "open FStar_Compiler_List" >> $@
	$(Q)echo "open FStar_Compiler_Util" >> $@
	$(Q)echo "open FStar_Compiler_Range" >> $@
	$(Q)echo "open FStar_Options" >> $@
	$(Q)echo "open FStar_Syntax_Syntax" >> $@
	$(Q)echo "open FStar_Parser_Const" >> $@
	$(Q)echo "open FStar_Syntax_Util" >> $@
	$(Q)echo "open FStar_Parser_AST" >> $@
	$(Q)echo "open FStar_Parser_Util" >> $@
	$(Q)echo "open FStar_Const" >> $@
	$(Q)echo "open FStar_Ident" >> $@
	$(Q)echo "open FStar_String" >> $@
	@# TODO: create a proper OCamlbuild rule for this production so that
	@# OCamlbuild knows how to generate parse.mly first (possibly using
	@# menhir) and removes the production as needed.
	$(call msg, "OCAMLYACC")
	$(Q)ocamlyacc parse.mly 2> yac-log
	$(Q)cat yac-log
	@if [ "0$$(grep "shift/reduce" yac-log | sed 's/^\([0-9]\+\).*/\1/')" -gt 6 ]; then \
	  echo "shift-reduce conflicts have increased; please fix" && rm -f $@ && false; \
	fi
	@if grep -q "reduce/reduce" yac-log ; then \
	  echo "A reduce-reduce conflict was introduced; please fix" && rm -f $@ && false; \
	fi
	$(Q)cat parse.ml >> $@
	$(Q)rm parse.ml parse.mli

# ------------------------------------------------------------------------------
# Preparing a release... these targets are not optimized and the Makefile is
# actually used for scripting a bunch of stuff.
# ------------------------------------------------------------------------------

# Copy the contents of $(1) into $(PREFIX)/$(2) while setting the right file
# permissions and creating directories on the fly as needed.
# (JP: the package version of this command is based on git but for OPAM
#  installs we cannot assume the user has git installed.)
install_dir = cd ../../$(1) && find . -type f -exec $(INSTALL_EXEC) -m 644 -D {} $(PREFIX)/$(2)/{} \;

# Install FStar into $(PREFIX) using the standard Unix directory
# structure.

ifeq ($(OS),Windows_NT)
  # On Cygwin, the `--prefix` option to dune only
  # supports Windows paths.
  FSTAR_PREFIX=$(shell cygpath -m $(PREFIX))
else
  FSTAR_PREFIX=$(PREFIX)
endif

install:
	@# Rebuild everything
	+$(MAKE) -C $(FSTAR_HOME)
	@# Install the binary and the binary library
	cd $(DUNE_SNAPSHOT) && dune install --prefix=$(FSTAR_PREFIX)
	@# Then the standard library sources and checked files
	+$(MAKE) -C $(FSTAR_HOME)/ulib install
	@# Then the rest
	+$(MAKE) install-sides

# The `install-sides` rule is intended to be run only by the nix flake.
# Indeed, nix needs to patch binaries created by OCaml (here fstar.exe),
# thus nix cannot use `dune install`

.PHONY: install-sides
install-sides:
	@# Then the examples (those now work from any F* installation flavor, sources, binary package or opam)
	@# ucontrib is needed by examples/crypto
	$(call install_dir,examples,share/fstar/examples)
	$(call install_dir,ucontrib,share/fstar/contrib)
	@# Then the tutorial
ifeq ($(MADOKO),Madoko)
	@# Build the tutorial first
	+$(MAKE) -C ../../doc/tutorial
endif
	$(INSTALL_EXEC) -m 644 -D ../../doc/Makefile.include $(PREFIX)/share/fstar/doc/Makefile.include
	$(call install_dir,doc/tutorial,share/fstar/doc/tutorial)

NAME=fstar_$(VERSION)_$(PLATFORM)

ifeq ($(OS),Windows_NT)
  Z3_NAME=z3.exe
else
  Z3_NAME=z3
endif
Z3_DIR=$(dir $(shell which $(Z3_NAME)))
# Z3_LICENSE MUST be explicitly overridden if z3 is installed from an opam package.
# See for instance $(FSTAR_HOME)/.docker/package.Dockerfile
ifndef Z3_LICENSE
  Z3_LICENSE?=$(shell if test -f $(Z3_DIR)/LICENSE.txt ; then echo $(Z3_DIR)/LICENSE.txt ; elif test -f $(Z3_DIR)/../LICENSE.txt ; then echo $(Z3_DIR)/../LICENSE.txt ; fi)
endif

# Create a zip / tar.gz package of FStar that contains a Z3 binary and
# proper license files.

ifeq ($(OS),Windows_NT)
  # On Cygwin, the `--prefix` option to dune only
  # supports Windows paths.
  package_prefix=$(shell cygpath -m $(CURDIR))/fstar
else
  package_prefix=$(CURDIR)/fstar
endif

package_dir = cd ../../$(1) && find . -type f -exec $(INSTALL_EXEC) -m 644 -D {} $(package_prefix)/$(2)/{} \;

package:
	if test -z "$(Z3_LICENSE)" ; then echo Please set Z3_LICENSE to the location of the license file for Z3 ; false ; fi
	@# Clean previous packages.
	! [ -d "$(package_prefix)" ]
	rm -f $(NAME).zip $(NAME).tar.gz
	@# Install F* into the package
	+PREFIX=$(package_prefix) $(MAKE) install
	@# Make the F* ulib F# DLL (NOT the nuget package)
	+PREFIX=$(package_prefix) $(MAKE) -C $(FSTAR_HOME)/ulib ulib-in-fsharp-dll
	@# Then the version file.
	cp ../../version.txt $(package_prefix)/
	@# Documentation and licenses
	cp ../../README.md ../../INSTALL.md ../../LICENSE ../../LICENSE-fsharp.txt $(package_prefix)
	cp $(Z3_LICENSE) $(package_prefix)/LICENSE-z3.txt
	@# Z3
ifeq ($(OS),Windows_NT)
	cp $(shell which libgmp-10.dll) $(package_prefix)/bin
	cp $(Z3_DIR)/*.exe $(Z3_DIR)/*.dll $(Z3_DIR)/*.lib $(package_prefix)/bin
	chmod a+x $(package_prefix)/bin/z3.exe $(package_prefix)/bin/*.dll
	zip -r -9 $(NAME).zip fstar
else
	cp $(Z3_DIR)/z3 $(package_prefix)/bin
	tar czf $(NAME).tar.gz fstar
endif

# This rule produces the package into an archive file fstar.tar.gz (or
# fstar.zip), whose filename does not contain the version and
# platform, and stores the original file name into
# version_platform.txt

package_unknown_platform: package
ifeq ($(OS),Windows_NT)
	echo $(NAME).zip > version_platform.txt
	mv $(NAME).tar.gz fstar.zip
else
	echo $(NAME).tar.gz > version_platform.txt
	mv $(NAME).tar.gz fstar.tar.gz
endif

.PHONY: clean
# Clean up all files generated by targets in _this_ Makefile
# We only remove the dynamic/ part of the OCaml snapshot. The rest
# should be removed only through the `clean-dune-snapshot` rule in the
# root Makefile. This is because `make all` no longer performs any
# bootstrapping, so `make clean` shouldn't clean up the whole
# snapshot.
clean:
	$(call msg, "CLEAN", "src/ocaml-output")
	$(Q)rm -f $(FStar_Version_ml) parse.mly
	$(Q)rm -f *.tar.gz *.zip
	$(Q)rm -f version_platform.txt
	$(Q)rm -f yac-log
	$(Q)rm -rf fstar
