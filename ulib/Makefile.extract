.PHONY: indent extra

FSTAR_HOME=..
include $(FSTAR_HOME)/.common.mk
include gmake/z3.mk
include gmake/fstar.mk

#AR: 01/03
NOEXTRACT_FILES=$(wildcard experimental/Steel.*.fst experimental/Steel.*.fsti)

#The steel files are included below for native compilation of the framing tactic

FSTAR_FILES:=$(filter-out $(NOEXTRACT_FILES), \
	$(wildcard FStar.*.fst FStar.*.fsti) \
	$(wildcard LowStar.*.fst LowStar.*.fsti) \
	$(wildcard legacy/*fst legacy/*fsti) \
	$(wildcard experimental/*fst experimental/*fsti)) \
        Steel.Effect.Common.fst \
        Steel.ST.GenElim.Base.fst \
        $(wildcard FStar.InteractiveHelpers.*.fst)

CODEGEN ?= OCaml
MY_FSTAR=$(RUNLIM) $(FSTAR) $(SIL) $(OTHERFLAGS) --lax --cache_checked_modules --odir $(OUTPUT_DIRECTORY) --cache_dir .cache.lax

%.checked.lax:
	@echo "[LAXCHECK  $(basename $(notdir $@))]"
	$(Q)$(MY_FSTAR) $< --already_cached '*,'-$(basename $(notdir $<))
	$(Q)touch -c $@

# And then, in a separate invocation, from each .checked.lax we
# extract an .ml file
$(OUTPUT_DIRECTORY)/%.ml:
	@echo "[EXTRACT   $(basename $(notdir $@))]"
	$(Q)$(MY_FSTAR) $(subst .checked.lax,,$(notdir $<)) --codegen $(CODEGEN) --extract_module $(basename $(notdir $(subst .checked.lax,,$<)))

.depend.extract:
	$(Q)mkdir -p .cache.lax
	$(Q)$(MY_FSTAR) --dep full $(EXTRACT_MODULES) $(addprefix --include , $(INCLUDE_PATHS)) $(FSTAR_FILES) > .depend.extract
	@echo "[DEPEND]"

depend.extract: .depend.extract

include .depend.extract

all-ml: $(ALL_ML_FILES)
lax-all: $(addsuffix .checked.lax, $(FSTAR_FILES))
