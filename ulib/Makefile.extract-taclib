.PHONY: indent extra

FSTAR_HOME=..

include ml/Makefile.realized

#AR: 01/03
NOEXTRACT_FILES=$(wildcard experimental/Steel.*.fst experimental/Steel.*.fsti)

#The steel files are included below for native compilation of the framing tactic

OUTPUT_DIRECTORY=$(DUNE_SNAPSHOT)/fstar-lib/generated

include $(FSTAR_HOME)/.common.mk
include gmake/z3.mk
include gmake/fstar.mk

FSTAR_FILES:=$(filter-out $(NOEXTRACT_FILES),$(wildcard *.fst *.fsti)) $(wildcard FStar.InteractiveHelpers.*.fst)

ifneq ($(STAGE_EXPERIMENTAL),0)
  FSTAR_FILES += \
	$(filter-out $(NOEXTRACT_FILES),$(wildcard experimental/*.fst experimental/*.fsti)) \
        Steel.Effect.Common.fst
ifneq ($(STAGE_EXPERIMENTAL),1)
  FSTAR_FILES += \
        Steel.ST.GenElim.Base.fst
endif
endif

CODEGEN = Plugin
MY_FSTAR=$(RUNLIM) $(FSTAR) $(SIL) $(OTHERFLAGS) --cache_checked_modules --odir $(OUTPUT_DIRECTORY) --cache_dir .cache --warn_error @241
EXTRACT_MODULES=--extract '-FStar +FStar.Range +FStar.Reflection +FStar.Tactics $(NOEXTRACT_MODULES) -FStar.List.Tot.Properties -FStar.Int.Cast.Full +Steel.Effect.Common +Steel.ST.GenElim.Base +FStar.InteractiveHelpers'

# And then, in a separate invocation, from each .checked we
# extract an .ml file
$(OUTPUT_DIRECTORY)/%.ml:
	@echo "[EXTRACT   $(basename $(notdir $@))]"
	$(Q)$(MY_FSTAR) $(subst .checked,,$(notdir $<)) --codegen $(CODEGEN) --extract_module $(basename $(notdir $(subst .checked,,$<)))

.depend.extract-taclib:
	$(Q)mkdir -p .cache
	true $(shell rm -f .depend.extract-taclib.rsp) $(foreach f,$(FSTAR_FILES),$(shell echo $(f) >> .depend.extract-taclib.rsp))
	$(Q)$(MY_FSTAR) --dep full $(EXTRACT_MODULES) $(addprefix --include , $(INCLUDE_PATHS)) @.depend.extract-taclib.rsp > .depend.extract-taclib
	@echo "[DEPEND]"

depend.extract-taclib: .depend.extract-taclib

include .depend.extract-taclib

.PHONY: handwritten handwritten-tac all-ml dune-snapshot

handwritten-tac:
	cp tactics_ml/*.ml $(DUNE_SNAPSHOT)/fstar-lib

all-ml: $(ALL_ML_FILES)

dune-snapshot: all-ml handwritten-tac
