type 'a erased = unit
let reveal : 'a. 'a erased -> unit = fun _ -> ()
let hide   : 'a. 'a -> 'a erased = fun  _ -> ()
let hide_reveal : 'a. 'a erased -> unit = fun _ -> ()
let reveal_hide : 'a. 'a -> unit = fun _ -> ()
let elift1   : 'a 'b. ('a -> unit) -> 'a erased -> 'b erased = fun _ _ -> ()
let elift2   : 'a 'b 'c. ('a -> 'c -> unit) -> 'a erased -> 'c erased -> 'b erased = fun _ _ _ -> ()
let elift3   : 'a 'b 'c 'd. ('a -> 'c -> 'd -> unit) -> 'a erased -> 'c erased -> 'd erased -> 'b erased = fun _ _ _ _ -> ()
let elift1_p : 'a 'b. ('a -> unit) -> 'a erased -> 'b erased = fun _ _ -> ()
let elift2_p : 'a 'b 'c. ('a -> 'c -> unit) -> 'a erased -> 'c erased -> 'b erased = fun _ _ _ -> ()
