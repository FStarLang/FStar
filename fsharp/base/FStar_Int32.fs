module FStar_Int32
(* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! *)
(* THIS FILE IS BASED ON AUTOGENERATED ml/FStar_Int32.ml FILE! *)
(* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! *)

type int32 = System.Int32
type t = System.Int32
let n = Prims.of_int 32

let int_to_t x = System.Int32.Parse((string x))
let __int_to_t = int_to_t

let v (x:t) : Prims.int = Prims.parse_int (string x)

let zero = 0
let one  = 1
let ones = System.Int32.MaxValue

(* Reexport add, plus aliases *)
let add           : t -> t -> t = (+)
let add_underspec : t -> t -> t = (+)
let add_mod       : t -> t -> t = (+)

(* Reexport sub, plus aliases *)
let sub           : t -> t -> t = (-)
let sub_underspec : t -> t -> t = (-)
let sub_mod       : t -> t -> t = (-)

(* Reexport mul, plus aliases *)
let mul           : t -> t -> t = (*)
let mul_underspec : t -> t -> t = (*)
let mul_mod       : t -> t -> t = (*)

(* Just reexport these *)
let div       : t -> t -> t = (/)
let rem       : t -> t -> t = (%)
let logand    : t -> t -> t = (&&&)
let logxor    : t -> t -> t = (^^^)
let logor     : t -> t -> t = (|||)
let lognot    :      t -> t = (~~~)
let to_string : t -> string = string
let of_string : string -> t = System.Int32.Parse

let to_string_hex (x : t) = "0x" + (x.ToString("X"))

let to_string_hex_pad (i : t) = i.ToString("X8")

(* The shifts take a uint32 argument, so we need to convert *)
let shift_right (n : t) (i : System.UInt32) : t = n >>> (FSharp.Core.Operators.int32 i)
let shift_left  (n : t) (i : System.UInt32) : t = n <<< (FSharp.Core.Operators.int32 i)
let shift_arithmetic_right = shift_right

(* Comparison operators *)
let eq  (a:t) (b:t) : bool = a = b
let gt  (a:t) (b:t) : bool = a > b
let gte (a:t) (b:t) : bool = a >= b
let lt  (a:t) (b:t) : bool = a < b
let lte (a:t) (b:t) : bool = a <= b

(* NOT Constant time operators *)
let eq_mask  (a:t) (b:t) : t = if a  = b then ones else zero
let gte_mask (a:t) (b:t) : t = if a >= b then ones else zero
